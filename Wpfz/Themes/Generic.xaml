<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Wpfz"
    xmlns:sys="clr-namespace:System;assembly=mscorlib">
    
    <FontFamily x:Key="FontFamily_Key" >Microsoft YaHei</FontFamily>
    <sys:Double x:Key="FontSize_Key">11</sys:Double>
    <sys:Double x:Key="DisableOpacity_Key">0.5</sys:Double>
    <sys:Double x:Key="ReadonlyOpacity_Key">0.6</sys:Double>
    <sys:Double x:Key="WatermarkOpacity_Key">0.4</sys:Double>
    <sys:String x:Key="DateFormat_Key">yyyy-MM-dd</sys:String>
    <sys:String x:Key="DateTimeFormat_Key">yyyy-MM-dd HH:mm:ss</sys:String>
    
    <!--ItemsControl:DataGrid,Tree-->
    <sys:Double x:Key="HeaderFontSize_Key">14</sys:Double>

    <!--Window窗口-->
    <SolidColorBrush x:Key="WindowForeground_Colors" Color="Black"/>
    <SolidColorBrush x:Key="WindowBackground_Colors" Color="#FFF1FAD2"/>
    <SolidColorBrush x:Key="WindowInnerBackground_Colors" Color="Transparent"/>
    <SolidColorBrush x:Key="WindowBorderBrush_Colors" Color="#FF4CAA0A"/>
    <DropShadowEffect x:Key="WindowDropShadow_Colors" Color="#F472F4"
                      BlurRadius="8" ShadowDepth="0" Direction="0" Opacity="0.7" />
    <SolidColorBrush x:Key="CaptionBarForeground_Colors" Color="White"/>
    <LinearGradientBrush x:Key="CaptionBarBackground_Colors" StartPoint="0,0" EndPoint="0,1" MappingMode="RelativeToBoundingBox">
        <GradientStop Color = "#8FADCE" Offset="0" />
        <GradientStop Color = "#BDD3EF" Offset="1" />
    </LinearGradientBrush>

    <!--MessageBoxz-->
    <SolidColorBrush x:Key="InfoForeground_Colors" Color="Black"/>
    <SolidColorBrush x:Key="QuestionForeground_Colors" Color="#74B80C"/>
    <SolidColorBrush x:Key="WarningForeground_Colors" Color="DarkOrange"/>
    <SolidColorBrush x:Key="ErrorForeground_Colors" Color="#E74E4E"/>
    <SolidColorBrush x:Key="SuccessForeground_Colors" Color="#16B32A"/>
    <SolidColorBrush x:Key="FailForeground_Colors" Color="#B92222"/>

    <!--WaitingBox-->
    <SolidColorBrush x:Key="WaitingBoxBackground_Colors" Color="#921692"/>

    <!--边框：Menu-->
    <DropShadowEffect x:Key="DefaultDropShadow_Colors" Color="Black"
                      BlurRadius="5" ShadowDepth="2" Direction="315"
                      Opacity="0.6" />

    <!--输入组件-->
    <SolidColorBrush x:Key="TextForeground_Colors" Color="Black"/>
    <SolidColorBrush x:Key="TextBackground_Colors" Color="White"/>
    <SolidColorBrush x:Key="TextSelectionBrush_Colors" Color="#FF9C9696"/>

    <!--TextBox左侧的Label默认背景色-->
    <SolidColorBrush x:Key="TextLabelBackground_Colors" Color="#FFC2FDEA"/>

    <!--输入框-->
    <SolidColorBrush x:Key="ControlBorderBrush_Colors" Color="#999C9F"/>
    <SolidColorBrush x:Key="MouseOverBorderBrush_Colors" Color="#F6D1D1"/>
    <SolidColorBrush x:Key="FocusBackground_Colors" Color="#365080"/>
    <SolidColorBrush x:Key="FocusBorderBrush_Colors" Color="#EBCECE"/>

    <!--ScrollBar-->
    <SolidColorBrush x:Key="ScrollBarForeround_Colors" Color="#877F7F"/>
    <SolidColorBrush x:Key="ScrollBarBackground_Colors" Color="#3E3E42"/>

    <!--对于DataGrid、ListBox、ComboBox、Calendar、Tree等，如果不想使用加控件前缀的颜色名称，也可以使用下面一次性定义的颜色名称-->
    <SolidColorBrush x:Key="HeaderBorderBrush_Colors" Color="#A6FFA500"/>
    <SolidColorBrush x:Key="HeaderBackground_Colors" Color="Beige"/>
    <SolidColorBrush x:Key="ItemsContentForeground_Colors" Color="Black"/>
    <SolidColorBrush x:Key="ItemsContentBackground_Colors" Color="White"/>
    <SolidColorBrush x:Key="ItemsAlternationContentBackground_Colors" Color="LightCyan"/>
    <SolidColorBrush x:Key="GridLinesBrush_Colors" Color="#A6D0C2A7"/>
    <SolidColorBrush x:Key="ItemSelectedForeground_Colors" Color="Black"/>
    <SolidColorBrush x:Key="ItemSelectedBackground_Colors" Color="#BA7DF4"/>
    <SolidColorBrush x:Key="ItemMouseOverBackground_Colors" Color="LightGray"/>
    <SolidColorBrush x:Key="ItemMouseOverForeground_Colors" Color="White"/>

    <!--DataGrid-->
    <SolidColorBrush x:Key="DataGrid_HeaderBorderBrush" Color="#A6FFA500"/>
    <SolidColorBrush x:Key="DataGrid_HeaderBackground" Color="Beige"/>
    <SolidColorBrush x:Key="DataGrid_ItemsContentForeground" Color="Black"/>
    <SolidColorBrush x:Key="DataGrid_ItemsContentBackground" Color="White"/>
    <SolidColorBrush x:Key="DataGrid_ItemsAlternationContentBackground" Color="LightCyan"/>
    <SolidColorBrush x:Key="DataGrid_GridLinesBrush" Color="#A6D0C2A7"/>
    <SolidColorBrush x:Key="DataGrid_ItemSelectedForeground" Color="Black"/>
    <SolidColorBrush x:Key="DataGrid_ItemSelectedBackground" Color="#BA7DF4"/>
    <SolidColorBrush x:Key="DataGrid_ItemMouseOverBackground" Color="LightGray"/>
    <SolidColorBrush x:Key="DataGrid_ItemMouseOverForeground" Color="White"/>
    
    <!--Calendar-->
    <!--<SolidColorBrush x:Key="Calendar_HeaderBorderBrush_Colors" Color="#A6FFA500"/>-->
    <SolidColorBrush x:Key="Calendar_HeaderBackground_Colors" Color="Beige"/>
    <!--<SolidColorBrush x:Key="Calendar_ItemsContentBackground_Colors" Color="White"/>
    <SolidColorBrush x:Key="Calendar_ItemsAlternationContentBackground_Colors" Color="LightCyan"/>
    <SolidColorBrush x:Key="Calendar_GridLinesBrush_Colors" Color="#A6D0C2A7"/>-->
    <SolidColorBrush x:Key="Calendar_ItemSelectedForeground_Colors" Color="Black"/>
    <SolidColorBrush x:Key="Calendar_ItemSelectedBackground_Colors" Color="#BA7DF4"/>
    <SolidColorBrush x:Key="Calendar_ItemMouseOverBackground_Colors" Color="LightGray"/>
    <SolidColorBrush x:Key="Calendar_ItemMouseOverForeground_Colors" Color="White"/>
    <!--高亮：日历Today-->
    <SolidColorBrush x:Key="Calendar_ItemHighlighteBackground_Colors" Color="Blue"/>
    <SolidColorBrush x:Key="Calendar_ItemHighlighteForeground_Colors" Color="White"/>

    <!--Tree-->
    <SolidColorBrush x:Key="Tree_HeaderBorderBrush_Colors" Color="#A6FFA500"/>
    <SolidColorBrush x:Key="Tree_HeaderBackground_Colors" Color="Beige"/>
    <SolidColorBrush x:Key="Tree_ItemsContentBackground_Colors" Color="White"/>
    <SolidColorBrush x:Key="Tree_ItemsAlternationContentBackground_Colors" Color="LightCyan"/>
    <SolidColorBrush x:Key="Tree_GridLinesBrush_Colors" Color="#A6D0C2A7"/>
    <SolidColorBrush x:Key="Tree_ItemSelectedForeground_Colors" Color="Black"/>
    <SolidColorBrush x:Key="Tree_ItemSelectedBackground_Colors" Color="#BA7DF4"/>
    <SolidColorBrush x:Key="Tree_ItemMouseOverBackground_Colors" Color="LightGray"/>
    <SolidColorBrush x:Key="Tree_ItemMouseOverForeground_Colors" Color="White"/>


    <!--按钮（透明背景）：Buttonz、……-->
    <SolidColorBrush x:Key="CheckedForeground_Colors" Color="#F7B63E"/>
    <SolidColorBrush x:Key="MouseOverForeground_Colors" Color="Orange"/>
    <SolidColorBrush x:Key="PressedForeground_Colors" Color="DarkOrange"/>
    <SolidColorBrush x:Key="LinkForeground_Colors" Color="#0816BB"/>

    <!-- CheckBox -->
    <SolidColorBrush x:Key="CheckBoxCheckedForeground_Colors" Color="Red"/>
    <SolidColorBrush x:Key="CheckBoxMouseOverForeground_Colors" Color="Orange"/>
    <SolidColorBrush x:Key="CheckBoxPressedForeground_Colors" Color="DarkOrange"/>

    <!-- RadioButton -->
    <SolidColorBrush x:Key="RadioButtonCheckedForeground_Colors" Color="Red"/>
    <SolidColorBrush x:Key="RadioButtonMouseOverForeground_Colors" Color="Orange"/>
    <SolidColorBrush x:Key="RadioButtonPressedForeground_Colors" Color="DarkOrange"/>

    <!--Popup，ComboBox，Calendar，Popup（无）-->
    <SolidColorBrush x:Key="PopupBackground_Colors" Color="Beige"/>
    <!-- Popup Border -->
    <SolidColorBrush x:Key="PopupDarkBorder_Colors" Color="#FFABADB3" />


    <!--Buttonz-->
    <SolidColorBrush x:Key="ButtonBorder_Colors" Color="#FF707070" />
    <SolidColorBrush x:Key="ButtonBackground_Colors" Color="Beige"/>
    <SolidColorBrush x:Key="ButtonForeground_Colors" Color="Black"/>
    <SolidColorBrush x:Key="ButtonMouseOverBackground_Colors" Color="Orange"/>
    <SolidColorBrush x:Key="ButtonMouseOverForeground_Colors" Color="White"/>
    <SolidColorBrush x:Key="ButtonPressedBackground_Colors" Color="DarkOrange"/>
    <SolidColorBrush x:Key="ButtonPressedForeground_Colors" Color="White"/>

    <!-- Control -->
    <SolidColorBrush x:Key="ControlNormalBackground_ColorsKey" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="ControlDisabledBackground_ColorsKey" Color="#FFF4F4F4" />
    <SolidColorBrush x:Key="ControlNormalBorder_ColorsKey" Color="#FFABADB3" />
    <SolidColorBrush x:Key="ControlMouseOverBorder_ColorsKey" Color="#FF7EB4EA" />
    <SolidColorBrush x:Key="ControlFocusedBorder_ColorsKey" Color="Red" />
    <SolidColorBrush x:Key="ControlSelectedBorder_ColorsKey" Color="#FF569DE5" />

    <!--Menu-->
    <SolidColorBrush x:Key="MenuForeground_Colors" Color="#920892"/>
    <SolidColorBrush x:Key="MenuBackground_Colors" Color="#DDD1D1"/>
    <SolidColorBrush x:Key="MenuBorderBrush_Colors" Color="DarkBlue"/>
    <SolidColorBrush x:Key="MenuMouseOverBackground_Colors" Color="#0D3CD2"/>
    <SolidColorBrush x:Key="MenuMouseOverForeground_Colors" Color="White"/>
    <SolidColorBrush x:Key="MenuPressedBackground_Colors" Color="#082CA0"/>
    <SolidColorBrush x:Key="MenuPressedForeground_Colors" Color="White"/>

    
    <!--*********  IconzStyle  **********-->
    <!-- 该样式被其他样式多处引用，所以此key的名称不要变 -->
    <Style x:Key="IconzStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="/Wpfz;component/Resources/Fonts/#FontIcon2016"/>
        <Setter Property="Foreground" Value="{StaticResource TextForeground_Colors}"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="{StaticResource FontSize_Key}"/>
    </Style>


    <!--*********  ToolTip  **************-->
    <Style TargetType="{x:Type ToolTip}">
        <Setter Property="Foreground" Value="{StaticResource TextForeground_Colors}"/>
        <Setter Property="FontFamily" Value="{StaticResource FontFamily_Key}"/>
        <Setter Property="FontSize" Value="{StaticResource FontSize_Key}"/>
        <Setter Property="Background" Value="{StaticResource HeaderBackground_Colors}"/>
        <Setter Property="BorderBrush" Value="{StaticResource FocusBorderBrush_Colors}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolTip}">
                    <Border CornerRadius="2"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}">
                        <ContentPresenter Margin="8,5,8,5"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--**************** BusyBox        ****************************************-->
    <Style TargetType="{x:Type local:BusyBox}">
        <Setter Property="Foreground" Value="{StaticResource TextForeground_Colors}"/>
        <Setter Property="Width" Value="32"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:BusyBox}">
                    <Grid VerticalAlignment="Center" HorizontalAlignment="Center" >
                        <Viewbox Stretch="Uniform"
                                 VerticalAlignment="Center"
                                 HorizontalAlignment="Center">
                            <TextBlock Text="&#xe124;"
                                       x:Name="part_MyIcon" FontSize="36"
                                       Style="{StaticResource IconzStyle}"
                                       RenderTransformOrigin="0.5,0.5"
                                       Foreground="{TemplateBinding Foreground}">
                                <TextBlock.RenderTransform>
                                    <RotateTransform x:Name="part_TransMyIcon" Angle="0"/>
                                </TextBlock.RenderTransform>
                            </TextBlock>
                        </Viewbox>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--激活状态-->
                        <Trigger Property="IsActive" Value="true">
                            <Setter Property="Visibility" Value="Visible" TargetName="part_MyIcon"/>
                            <Trigger.EnterActions>
                                <BeginStoryboard >
                                    <Storyboard >
                                        <DoubleAnimation RepeatBehavior="Forever"
                                                         Storyboard.TargetName="part_TransMyIcon" 
                                                         Storyboard.TargetProperty="Angle"
                                                         To="360" Duration="0:0:2.5"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard >
                                    <Storyboard >
                                        <DoubleAnimation RepeatBehavior="Forever"
                                                         Storyboard.TargetName="part_TransMyIcon" 
                                     Storyboard.TargetProperty="Angle" To="0" Duration="0"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <!--非激活状态-->
                        <Trigger Property="IsActive" Value="false">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="part_MyIcon"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--**************** Button         ****************************************-->
    <Style x:Key="ButtonImageStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <local:ImageButtonChrome x:Name="Chrome"
                                                    Background="{TemplateBinding Background}"
                                                    BorderBrush="{TemplateBinding BorderBrush}"
                                                    RenderDefaulted="{TemplateBinding Button.IsDefaulted}"
                                                    RenderMouseOver="{TemplateBinding IsMouseOver}"
                                                    RenderPressed="{TemplateBinding IsPressed}"
                                                    SnapsToDevicePixels="true">
                        <ContentPresenter Margin="{TemplateBinding Padding}" Name="PART_ContentPresenter"
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            RecognizesAccessKey="True"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </local:ImageButtonChrome>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="Chrome" Property="RenderPressed" Value="true"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!--**************** Buttonz        ****************************************-->
    <!--Buttonz模板-->
    <ControlTemplate x:Key="ButtonzTemplate" TargetType="{x:Type local:Buttonz}">
        <Border x:Name="part_border"
                Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Background}" 
                Height="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Height}" 
                CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CornerRadius}" 
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Width="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Width}">
            <!--Icon/Text-->
            <StackPanel Orientation="Horizontal" VerticalAlignment="Center" 
                        Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                <TextBlock x:Name="part_icon"
                           Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IconzMargin}" 
                           RenderTransformOrigin="0.5,0.5"
                           Style="{StaticResource IconzStyle}"
                           Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Iconz}"
                           FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= IconzSize}" 
                           Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= Foreground}">
                    <TextBlock.RenderTransform>
                        <RotateTransform x:Name="part_transMyIcon" Angle="0"/>
                    </TextBlock.RenderTransform>
                </TextBlock>
                <TextBlock x:Name="part_txt" 
                           VerticalAlignment="Center"  
                           TextDecorations="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ContentDecorations}" 
                           Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}" 
                           FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=FontSize}" 
                           Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Foreground}"/>
            </StackPanel>
        </Border>
        <!--触发器-->
        <ControlTemplate.Triggers>
            <!--设置鼠标进入时的背景、前景样式-->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverBackground}" TargetName="part_border" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverForeground}" TargetName="part_icon"/>
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverForeground}" TargetName="part_txt"/>
            </Trigger>
            <!--Icon的动画触发器-->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true"/>
                    <Condition Property="AllowsAnimation" Value="true"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="part_transMyIcon"
                                             Storyboard.TargetProperty="Angle"
                                             To="360" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="part_transMyIcon"
                                             Storyboard.TargetProperty="Angle"
                                             To="-360" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.ExitActions>
            </MultiTrigger>
            <!--鼠标按下时的前景、背景样式-->
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background"
                        Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=PressedBackground}"
                        TargetName="part_border" />
                <Setter Property="Foreground"
                        Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=PressedForeground}"
                        TargetName="part_icon"/>
                <Setter Property="Foreground"
                        Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=PressedForeground}"
                        TargetName="part_txt"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.5" TargetName="part_border"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="ButtonzDefaultStyle" TargetType="{x:Type local:Buttonz}">
        <Setter Property="Template" Value="{StaticResource ButtonzTemplate}"/>
        <Setter Property="Background" Value="{StaticResource ButtonBackground_Colors}" />
        <Setter Property="Foreground" Value="{StaticResource ButtonForeground_Colors}" />
        <Setter Property="MouseOverBackground" Value="{StaticResource ButtonMouseOverBackground_Colors}" />
        <Setter Property="MouseOverForeground" Value="{StaticResource ButtonMouseOverForeground_Colors}" />
        <Setter Property="PressedBackground" Value="{StaticResource ButtonPressedBackground_Colors}" />
        <Setter Property="PressedForeground" Value="{StaticResource ButtonPressedForeground_Colors}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="30" />
        <Setter Property="FontSize" Value="{StaticResource FontSize_Key}"/>
        <Setter Property="CornerRadius" Value="0" />
        <Setter Property="IconzSize" Value="13" />
        <Setter Property="IconzMargin" Value="0,0,5,0" />
        <Setter Property="Padding" Value="3,1,3,1" />
        <Setter Property="Content" Value="{x:Null}" />
        <Setter Property="AllowsAnimation" Value="False" />
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorder_Colors}"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>
    <!--背景透明的Buttonz样式-->
    <Style x:Key="ButtonzTransparencyStyle" TargetType="{x:Type local:Buttonz}">
        <Setter Property="Template" Value="{StaticResource ButtonzTemplate}"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource TextForeground_Colors}" />
        <Setter Property="MouseOverBackground" Value="Transparent" />
        <Setter Property="MouseOverForeground" Value="{StaticResource MouseOverForeground_Colors}" />
        <Setter Property="PressedBackground" Value="Transparent" />
        <Setter Property="PressedForeground" Value="{StaticResource  PressedForeground_Colors}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="CornerRadius" Value="0" />
        <Setter Property="FontSize" Value="{StaticResource FontSize_Key}" />
        <Setter Property="IconzSize" Value="13" />
        <Setter Property="Padding" Value="3,1,3,1" />
        <Setter Property="Content" Value="{x:Null}" />
        <Setter Property="IconzMargin" Value="0,0,5,0" />
        <Setter Property="AllowsAnimation" Value="False" />
        <Setter Property="Cursor" Value="Hand" />
    </Style>
    <!--LinkButton的Buttonz样式，默认无图标-->
    <Style x:Key="ButtonzLinkButtonStyle" TargetType="{x:Type local:Buttonz}">
        <Setter Property="Template" Value="{StaticResource ButtonzTemplate}"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource LinkForeground_Colors}" />
        <Setter Property="MouseOverBackground" Value="Transparent" />
        <Setter Property="MouseOverForeground" Value="{StaticResource MouseOverForeground_Colors}" />
        <Setter Property="PressedBackground" Value="Transparent" />
        <Setter Property="PressedForeground" Value="{StaticResource PressedForeground_Colors}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Padding" Value="3,1,3,1" />
        <Setter Property="Content" Value="{x:Null}" />
        <Setter Property="FontSize" Value="{StaticResource FontSize_Key}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="CornerRadius" Value="0" />
        <Setter Property="IconzSize" Value="13" />
        <Setter Property="IconzMargin" Value="0" />
        <!--<Setter Property="Iconz" Value="" />-->
        <Setter Property="AllowsAnimation" Value="False" />
        <Setter Property="ContentDecorations" Value="Underline" />
    </Style>

    <!--默认样式-->
    <Style TargetType="{x:Type local:Buttonz}" BasedOn="{StaticResource ButtonzDefaultStyle}"/>


    <!--*************** ToggleButton（后面的DatePicker引用了它的样式，所以定义在DatePicker的前面）    ****************************************-->
    <Style x:Key="DefaultToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{StaticResource TextForeground_Colors}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Grid" Margin="{TemplateBinding Padding}">
                        <ContentPresenter VerticalAlignment="Center"
                                          HorizontalAlignment="Center"/>
                    </Grid>
                    <!--z触发器-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource MouseOverForeground_Colors}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource PressedForeground_Colors}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource PressedForeground_Colors}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource DisableOpacity_Key}"
                                    TargetName="Grid"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="IconzStyleToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{StaticResource TextForeground_Colors}" />
        <Setter Property="local:Attach.IconzSize" Value="20"/>
        <Setter Property="local:Attach.IconzMargin" Value="1"/>
        <Setter Property="local:Attach.Iconz" Value="&#xe190;"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Grid" Margin="{TemplateBinding Padding}">
                        <TextBlock x:Name="PART_Iconz"
                                   FontSize="{Binding Path=(local:Attach.IconzSize),RelativeSource={RelativeSource TemplatedParent}}"
                                   Text="{TemplateBinding local:Attach.Iconz}" 
                                   Foreground="{TemplateBinding Foreground}"
                                   Style="{StaticResource IconzStyle}"
                                   Margin="{TemplateBinding local:Attach.IconzMargin}"/>
                    </Grid>
                    <!--z触发器-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource MouseOverForeground_Colors}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource PressedForeground_Colors}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource PressedForeground_Colors}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource DisableOpacity_Key}"
                                    TargetName="Grid"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--**************** CheckBox       ****************************************-->
    <Style x:Key="CheckBoxDefaultStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource TextForeground_Colors}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="local:Attach.IconzMargin" Value="1, 1, 3, 1"/>
        <Setter Property="local:Attach.IconzSize" Value="18"/>
        <Setter Property="FontSize" Value="{StaticResource FontSize_Key}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="grid" Margin="{TemplateBinding Padding}" VerticalAlignment="Center">
                        <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                            <TextBlock  x:Name="icon" Style="{StaticResource IconzStyle}"
                                        Text="&#xe069;"
                                        FontSize="{TemplateBinding local:Attach.IconzSize}"
                                        Margin="{TemplateBinding local:Attach.IconzMargin}"
                                        Foreground="{TemplateBinding Foreground}"/>
                            <ContentPresenter VerticalAlignment="Center"/>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Text" Value="&#xe06b;" TargetName="icon" />
                            <Setter Property="Foreground" Value="{StaticResource CheckBoxCheckedForeground_Colors}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Text" Value="&#xe06a;" TargetName="icon" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{StaticResource CheckBoxMouseOverForeground_Colors}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{StaticResource DisableOpacity_Key}" TargetName="grid" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--CheckBox 的简单样式 -->
    <Style x:Key="CheckBoxSimpleStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource TextForeground_Colors}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="local:Attach.IconzMargin" Value="1"/>
        <Setter Property="local:Attach.IconzSize" Value="22"/>
        <Setter Property="FontSize" Value="{StaticResource FontSize_Key}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <TextBlock  x:Name="icon" Style="{StaticResource IconzStyle}"
                                Text="&#xe069;"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Center"
                                FontSize="{TemplateBinding local:Attach.IconzSize}"
                                Margin="{TemplateBinding local:Attach.IconzMargin}"
                                Foreground="{TemplateBinding Foreground}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Text" Value="&#xe06b;" TargetName="icon" />
                            <Setter Property="Foreground"
                                    Value="{StaticResource CheckedForeground_Colors}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Text" Value="&#xe06a;" TargetName="icon" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground"
                                    Value="{StaticResource MouseOverForeground_Colors}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity"
                                    Value="{StaticResource DisableOpacity_Key}"
                                    TargetName="icon" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource CheckBoxDefaultStyle}"/>-->



    <!--**************** CheckBoxz ****************************************-->
    <Style TargetType="{x:Type local:CheckBoxz}">
        <Setter Property="Background" Value="#FF4A9E4A"/>
        <Setter Property="Foreground" Value="#DDE8E1"/>
        <Setter Property="CheckedForeground" Value="White"/>
        <Setter Property="CheckedBackground" Value="#FF0CC50C"/>
        <Setter Property="FontSize" Value="{StaticResource FontSize_Key}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Width" Value="75"/>
        <Setter Property="Height" Value="28"/>
        <Setter Property="Margin" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <!--控件模板-->
                <ControlTemplate TargetType="{x:Type local:CheckBoxz}">
                    <Viewbox Stretch="Uniform"  VerticalAlignment="Center" HorizontalAlignment="Center">
                        <Border x:Name="border" Width="75" Height="28"
                                Background="{TemplateBinding Background}"
                                SnapsToDevicePixels="True"
                                Margin="{TemplateBinding Margin}" CornerRadius="14">
                            <StackPanel Orientation="Horizontal">
                                <!--状态球-->
                                <Border x:Name="state" Width="24" Height="24"
                                        Margin="3,2,1,2" CornerRadius="12"
                                        SnapsToDevicePixels="True"
                                        Background="{TemplateBinding Foreground}">
                                    <Border.RenderTransform>
                                        <TranslateTransform x:Name="transState" X="0"/>
                                    </Border.RenderTransform>
                                </Border>
                                <!--文本框-->
                                <TextBlock Width="40"
                                           Foreground="{TemplateBinding Foreground}"
                                           x:Name="txt"
                                           Text="{TemplateBinding Text}"
                                           VerticalAlignment="Center"
                                           TextAlignment="Center">
                                    <TextBlock.RenderTransform>
                                        <TranslateTransform x:Name="transTxt" X="0"/>
                                    </TextBlock.RenderTransform>
                                </TextBlock>
                            </StackPanel>
                        </Border>
                    </Viewbox>

                    <!--触发器：设置选中状态符号-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Text"
                                    Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CheckedText}"
                                    TargetName="txt"/>
                            <Setter Property="Background"
                                    Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CheckedForeground}"
                                    TargetName="state"/>
                            <Setter Property="Foreground"
                                    Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CheckedForeground}"
                                    TargetName="txt"/>
                            <Setter Property="Background"
                                    Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CheckedBackground}"
                                    TargetName="border"/>
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="transState"
                                                         Storyboard.TargetProperty="X"
                                                         To="45" Duration="0:0:0.2" />
                                        <DoubleAnimation Storyboard.TargetName="transTxt"
                                                         Storyboard.TargetProperty="X"
                                                         To="-24" Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="transState"
                                                         Storyboard.TargetProperty="X"
                                                         To="0" Duration="0:0:0.2" />
                                        <DoubleAnimation Storyboard.TargetName="transTxt"
                                                         Storyboard.TargetProperty="X"
                                                         To="0" Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity"
                                    Value="{StaticResource DisableOpacity_Key}"
                                    TargetName="border"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--**************** ComboBox       ****************************************-->
    <!--编辑状态文本框样式-->
    <Style x:Key="TextBox_ShareEditableStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Margin" Value="1"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="MaxLength" Value="2048"/>
        <Setter Property="Foreground" Value="{StaticResource TextForeground_Colors}"/>

        <Setter Property="ContextMenu" Value="{StaticResource TextBoxContextMenu}" />

        <Setter Property="SelectionBrush" Value="{StaticResource TextSelectionBrush_Colors}" />
        <Setter Property="FontSize" Value="{StaticResource FontSize_Key}"/>
        <Setter Property="FontFamily" Value="{StaticResource FontFamily_Key}"/>
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="CaretBrush" Value="{StaticResource TextForeground_Colors}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Style.Triggers>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="Opacity" Value="{StaticResource ReadonlyOpacity_Key}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{StaticResource DisableOpacity_Key}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ShareComboToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{StaticResource TextForeground_Colors}" />
        <Setter Property="local:Attach.IconzSize" Value="16"/>
        <Setter Property="local:Attach.IconzMargin" Value="0,1,3,1"/>
        <Setter Property="local:Attach.Iconz" Value="&#xe252;"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Grid">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Border Background="{TemplateBinding Background}"
                                x:Name="Bg"
                                Grid.ColumnSpan="2" Margin="0,1,1,1"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                Opacity="0.3"/>
                        <TextBlock Grid.Column="1"
                                   x:Name="xIcon"
                                   FontSize="{Binding Path=(local:Attach.IconzSize),RelativeSource={RelativeSource TemplatedParent}}"
                                   Text="{TemplateBinding local:Attach.Iconz}" 
                                   local:Attach.AllowsAnimation="{TemplateBinding IsChecked}"
                                   Foreground="{TemplateBinding Foreground}"
                                   Style="{StaticResource IconzStyle}"
                                   Margin="{TemplateBinding local:Attach.IconzMargin}"/>
                    </Grid>
                    <!--z触发器-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground"
                                    Value="{StaticResource MouseOverForeground_Colors}" />
                            <Setter Property="Opacity" TargetName="Bg" Value="0.55" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground"
                                    Value="{StaticResource PressedForeground_Colors}" />
                            <Setter Property="Opacity" TargetName="Bg" Value="0.6" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground"
                                    Value="{StaticResource PressedForeground_Colors}" />
                            <Setter Property="Opacity" TargetName="Bg" Value="0.6" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity"
                                    Value="{StaticResource DisableOpacity_Key}"
                                    TargetName="Grid"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--下拉条目样式-->
    <Style x:Key="ComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Height" Value="28" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Grid Background="{TemplateBinding Background}" Margin="0,0.5">
                        <Border x:Name="ItemBackground"
                                IsHitTestVisible="False"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}" />
                        <ContentPresenter x:Name="contentPresenter"
                                          Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="ItemBackground"
                                    Property="Background"
                                    Value="{StaticResource ItemSelectedBackground_Colors}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ItemBackground"
                                    Property="Background"
                                    Value="{StaticResource ItemMouseOverBackground_Colors}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--水印：local:Attach.Watermark-->
    <!--文本框左侧的Label区域：local:Attach.LabelTemplate ，local:Attach.Label-->
    <!--附加内容区域：local:Attach.AttachContent-->
    <!--圆角：local:Attach.CornerRadius-->
    <!--local:Attach.MouseOverBorderBrush-->
    <!--local:Attach.FocusBorderBrush-->
    <!--local:Attach.FocusBackground-->
    <Style x:Key="ComboBoxDefaultStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="Height" Value="30" />
        <Setter Property="Width" Value="180" />
        <Setter Property="Foreground" Value="{StaticResource TextForeground_Colors}" />
        <Setter Property="Background" Value="{StaticResource TextBackground_Colors}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource ControlBorderBrush_Colors}" />
        <Setter Property="local:Attach.FocusBackground" Value="{StaticResource FocusBackground_Colors}" />
        <Setter Property="local:Attach.FocusBorderBrush" Value="{StaticResource FocusBorderBrush_Colors}" />
        <Setter Property="local:Attach.MouseOverBorderBrush" Value="{StaticResource MouseOverBorderBrush_Colors}" />
        <Setter Property="FontFamily" Value="{StaticResource FontFamily_Key}" />
        <Setter Property="FontSize" Value="{StaticResource FontSize_Key}" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItemStyle}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="MaxDropDownHeight" Value="400" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid x:Name="PART_Root">
                        <Border x:Name="Bg"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                CornerRadius="{TemplateBinding local:Attach.CornerRadius}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" />
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="21" />
                            </Grid.ColumnDefinitions>
                            <!--Label区域-->
                            <ContentControl x:Name="Label"
                                            Template="{TemplateBinding local:Attach.LabelTemplate}"
                                            IsTabStop="False" IsHitTestVisible="False"
                                            Content="{TemplateBinding local:Attach.Label}"
                                            Margin="1,1,0,1"/>
                            <!--附加内容区域-->
                            <Border x:Name="PART_AttachContent"
                                    Panel.ZIndex="2"
                                    Grid.Column="2"
                                    VerticalAlignment="Center"
                                    HorizontalAlignment="Center" >
                                <ContentControl VerticalAlignment="Center"
                                                VerticalContentAlignment="Center"
                                                Template="{TemplateBinding local:Attach.AttachContent}" />
                            </Border>
                            <!--下拉按钮-->
                            <ToggleButton x:Name="PART_DropDownToggle"
                                          IsTabStop="False"
                                          Style="{StaticResource ShareComboToggleButtonStyle}" 
                                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          Margin="2 1 2 1"
                                          Grid.Column="1"
                                          Grid.ColumnSpan="3"
                                          IsEnabled="{Binding Path=IsReadOnly,RelativeSource={RelativeSource TemplatedParent},
                                          Converter={x:Static local:MyConverter.TrueToFalse},Mode=OneWay}"
                                          Background="{TemplateBinding local:Attach.FocusBackground}"/>
                            <!--水印-->
                            <Border Grid.Column="1">
                                <TextBlock x:Name="Message"  Padding="0" Visibility="Collapsed"
                                           Text="{TemplateBinding local:Attach.Watermark}" 
                                           Foreground="{TemplateBinding Foreground}"
                                           IsHitTestVisible="False"
                                           Opacity="{StaticResource WatermarkOpacity_Key}"
                                           HorizontalAlignment="Left" TextAlignment="Center" 
                                           VerticalAlignment="Center" Margin="5,2,5,2" />
                            </Border>
                            <!--主内容区域-->
                            <Grid Grid.Column="1" x:Name="ContentSite" Margin="2 0 0 0" >
                                <ContentPresenter x:Name="PART_SelectedItem"
                                                  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                                  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                                  Content="{TemplateBinding SelectionBoxItem}"
                                                  ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                                  HorizontalAlignment="Stretch" Margin="2,0,2,0" 
                                                  IsHitTestVisible="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                <!--文本编辑-->
                                <TextBox  x:Name="PART_EditableTextBox"
                                          Style="{StaticResource TextBox_ShareEditableStyle}"
                                          Visibility="Collapsed" 
                                          HorizontalAlignment="Stretch"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          IsHitTestVisible="True"
                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          IsReadOnly="{TemplateBinding IsReadOnly}"
                                          FontFamily="{TemplateBinding FontFamily}"
                                          Foreground="{TemplateBinding Foreground}"
                                          Text="{TemplateBinding Text}"
                                          FontSize="{TemplateBinding FontSize}" />
                            </Grid>
                        </Grid>
                        <!--弹出下拉控件-->
                        <Popup x:Name="PART_Popup"
                               AllowsTransparency="True"
                               Focusable="False"
                               IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                               Placement="Bottom">
                            <Grid Width="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}"
                                  MaxHeight="{Binding MaxDropDownHeight, RelativeSource={RelativeSource TemplatedParent}}">
                                <Border x:Name="PopupBorder"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        HorizontalAlignment="Stretch"
                                        Height="Auto"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        Background="{StaticResource PopupBackground_Colors}">
                                </Border>
                                <ScrollViewer x:Name="DropDownScrollViewer" BorderThickness="0" Margin="1">
                                    <ItemsPresenter x:Name="ItemsPresenter"
                                                    KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--1.显示水印-->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                            <Setter TargetName="Message" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <!--编辑模式-->
                        <Trigger Property="IsEditable" Value="True">
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_SelectedItem" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_DropDownToggle" Property="Grid.Column" Value="3" />
                            <Setter TargetName="PART_DropDownToggle" Property="Grid.ColumnSpan" Value="1" />
                            <Setter TargetName="PART_DropDownToggle" Property="Background" Value="Transparent" />
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="PART_DropDownToggle" Property="Focusable" Value="False" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{Binding Path=(local:Attach.MouseOverBorderBrush),RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter  Property="BorderBrush" Value="{Binding Path=(local:Attach.FocusBorderBrush),RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter  Property="BorderBrush" Value="{Binding Path=(local:Attach.FocusBorderBrush),RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_Root"
                                    Property="Opacity"
                                    Value="{StaticResource DisableOpacity_Key}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--ComboBox包含附加属性Label的样式 LabelComboBox -->
    <Style x:Key="ComboBoxLabelStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource ComboBoxDefaultStyle}">
        <Setter Property="local:Attach.LabelTemplate" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Border Background="{StaticResource TextLabelBackground_Colors}">
                        <TextBlock VerticalAlignment="Center"
                                   HorizontalAlignment="Right"
                                   Margin="2"
                                   Text="{TemplateBinding Content}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource ComboBoxDefaultStyle}"/>-->



    <!--**************** DataGrid       ****************************************-->
    <!--列头宽度调整的默认样式-->
    <Style x:Key="ColumnHeaderGripperDefaultStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Width" Value="8" />
        <Setter Property="Background" Value="{StaticResource DataGrid_HeaderBorderBrush}" />
        <Setter Property="Cursor" Value="SizeWE" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}"
                            Background="Transparent" Margin="0 0 0 2">
                        <Rectangle HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Width="1" Fill="{TemplateBinding Background}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--列头默认样式-->
    <Style x:Key="DataGridColumnHeaderDefaultStyle" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="MinWidth" Value="5" />
        <Setter Property="MinHeight" Value="25" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="10,4,4,7" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="FontWeight" Value="SemiBold"></Setter>
        <Setter Property="FontSize" Value="{StaticResource HeaderFontSize_Key}" />
        <Setter Property="BorderThickness" Value="0,0,0,3" />
        <Setter Property="BorderBrush" Value="#A6FFA500" />
        <Setter Property="Background" Value="{StaticResource DataGrid_HeaderBackground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="auto" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="BackgroundBorder"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Grid.ColumnSpan="2"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}" />
                        <ContentPresenter x:Name="HeaderContent"
                                          Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <TextBlock x:Name="SortArrow"
                                   Style="{StaticResource IconzStyle}"
                                   Text="&#xe624;"
                                   Grid.Column="1" Width="20"
                                   Visibility="Collapsed"
                                   FontSize="14" Margin="1,1,3,1" />
                        <Thumb x:Name="PART_LeftHeaderGripper"
                               HorizontalAlignment="Left" HorizontalContentAlignment="Left"
                               Style="{StaticResource ColumnHeaderGripperDefaultStyle}" />
                        <Thumb x:Name="PART_RightHeaderGripper"
                               HorizontalAlignment="Right"
                               HorizontalContentAlignment="Right"
                               Background="Transparent"
                               Style="{StaticResource ColumnHeaderGripperDefaultStyle}"
                               Grid.Column="1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--显示排序标示-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="SortDirection" Value="{x:Null}" />
                                <Condition Property="CanUserSort" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                        <!--可排序列鼠标样式-->
                        <Trigger Property="CanUserSort" Value="True">
                            <Setter Property="Cursor" Value="Hand"/>
                        </Trigger>
                        <!--升序-->
                        <Trigger Property="SortDirection" Value="Ascending">
                            <Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <!--降序-->
                        <Trigger Property="SortDirection" Value="Descending">
                            <Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
                            <Setter TargetName="SortArrow" Property="Text" Value="&#xe625;"/>
                        </Trigger>
                        <!--第一列左边不显示分割线-->
                        <Trigger Property="DisplayIndex" Value="2">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_LeftHeaderGripper" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--行样式-->
    <Style x:Key="DataGridRowDefaultStyle" TargetType="{x:Type DataGridRow}">
        <Setter Property="Foreground" Value="{StaticResource DataGrid_ItemsContentForeground}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Margin" Value="0,0,0,0" />

        <Style.Triggers>
            <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                <Setter Property="Background" Value="{StaticResource DataGrid_ItemsAlternationContentBackground}" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter  Property="Background" Value="{StaticResource DataGrid_ItemSelectedBackground}" />
                <Setter Property="Foreground" Value="{StaticResource DataGrid_ItemSelectedForeground}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="Selector.IsSelectionActive" Value="True" />
                </MultiTrigger.Conditions>
                <Setter  Property="Background" Value="{StaticResource DataGrid_ItemSelectedBackground}" />
                <Setter Property="Foreground" Value="{StaticResource DataGrid_ItemSelectedForeground}" />
            </MultiTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter  Property="Background" Value="{StaticResource DataGrid_ItemMouseOverBackground}" />
                <Setter Property="Foreground" Value="{StaticResource DataGrid_ItemMouseOverForeground}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <!--行头调整高度的默认样式 -->
    <Style x:Key="RowHeaderGripperDefaultStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Height" Value="6" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Cursor" Value="SizeNS" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}" Background="Transparent"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--行头部的默认样式-->
    <Style x:Key="DataGridRowHeaderDefaultStyle" TargetType="{x:Type DataGridRowHeader}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0,0,1,0" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
                    <Grid>
                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                Margin="{TemplateBinding Margin}"
                                SnapsToDevicePixels="True">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                        </Border>
                        <Thumb x:Name="PART_TopHeaderGripper"
                               VerticalContentAlignment="Top"
                               VerticalAlignment="Top"
                               Background="Transparent" 
                               Style="{StaticResource RowHeaderGripperDefaultStyle}" />
                        <Thumb x:Name="PART_BottomHeaderGripper"
                               VerticalContentAlignment="Bottom"
                               VerticalAlignment="Bottom"
                               Style="{StaticResource RowHeaderGripperDefaultStyle}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--单元格默认样式-->
    <Style x:Key="DataGridCellDefaultStyle" TargetType="{x:Type DataGridCell}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource DataGrid_ItemSelectedForeground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--DataGrid的默认样式-->
    <Style x:Key="DataGridDefaultStyle" TargetType="{x:Type DataGrid}">
        <Setter Property="MinRowHeight" Value="25" />
        <Setter Property="Background" Value="{StaticResource DataGrid_ItemsContentBackground}" />
        <Setter Property="BorderBrush" Value="{StaticResource ControlBorderBrush_Colors}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalGridLinesBrush" Value="{StaticResource DataGrid_GridLinesBrush}" />
        <Setter Property="VerticalGridLinesBrush" Value="{StaticResource DataGrid_GridLinesBrush}" />
        <Setter Property="ColumnHeaderStyle" Value="{StaticResource DataGridColumnHeaderDefaultStyle}" />
        <Setter Property="RowHeaderStyle" Value="{StaticResource DataGridRowHeaderDefaultStyle}" />
        <Setter Property="CellStyle" Value="{StaticResource DataGridCellDefaultStyle}" />
        <Setter Property="RowStyle" Value="{StaticResource DataGridRowDefaultStyle}" />
        <Setter Property="HeadersVisibility" Value="All" />
        <Setter Property="EnableRowVirtualization" Value="True" />
        <Setter Property="EnableColumnVirtualization" Value="False" />
        <Setter Property="AutoGenerateColumns" Value="True" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="SelectionMode" Value="Single" />
        <Setter Property="SelectionUnit" Value="FullRow" />
        <Setter Property="GridLinesVisibility" Value="All" />
        <Setter Property="AlternationCount" Value="2"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True"/>
        <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling" />
        <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="False" />
        <!--列头移动列时候分割线样式-->
        <Setter Property="DropLocationIndicatorStyle">
            <Setter.Value>
                <Style TargetType="{x:Type Separator}">
                    <Setter Property="Background" Value="{StaticResource DataGrid_HeaderBorderBrush}" />
                    <Setter Property="Width" Value="2.5" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Separator}">
                                <Rectangle Fill="{TemplateBinding Background}"
                                           Height="{TemplateBinding Height}"
                                           Width="{TemplateBinding Width}" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <!--DataGrid控件模板-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            x:Name="border"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition x:Name="col_rowheader" Width="1" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>
                                        <!--表格头部-->
                                        <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter"
                                                                        Grid.Column="1" Grid.ColumnSpan="2"
                                                                        Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                        <!--主数据区-->
                                        <Grid Grid.Row="1" Grid.ColumnSpan="2">
                                            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                                                    CanContentScroll="{TemplateBinding CanContentScroll}"
                                                                    Grid.ColumnSpan="2" />
                                        </Grid>
                                        <!--垂直滑动条-->
                                        <ScrollBar x:Name="PART_VerticalScrollBar"
                                                   Grid.Column="2"
                                                   Maximum="{TemplateBinding ScrollableHeight}"
                                                   Orientation="Vertical"
                                                   Grid.Row="0" Grid.RowSpan="3"
                                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                                   Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                   ViewportSize="{TemplateBinding ViewportHeight}" />
                                        <!--横向滑动条-->
                                        <ScrollBar x:Name="PART_HorizontalScrollBar"
                                                   Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="2"
                                                   Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal"
                                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                                   Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                   ViewportSize="{TemplateBinding ViewportWidth}" />
                                    </Grid>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity"
                                    Value="{StaticResource DisableOpacity_Key}"
                                    TargetName="border" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsGrouping" Value="true">
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--<Style TargetType="{x:Type DataGrid}" BasedOn="{StaticResource DataGridDefaultStyle}"/>-->





    <!--**************** Calendar       ****************************************-->
    <!--Day按钮样式-->
    <Style x:Key="CalendarDayButtonStyle" TargetType="{x:Type CalendarDayButton}">
        <Setter Property="MinWidth" Value="28" />
        <Setter Property="MinHeight" Value="5" />
        <Setter Property="FontFamily" Value="{StaticResource FontFamily_Key}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource TextForeground_Colors}" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CalendarDayButton}">
                    <Grid x:Name="Grid" Margin="{TemplateBinding Margin}">
                        <Border x:Name="Bg" Background="{TemplateBinding Background}" />
                        <ContentPresenter x:Name="NormalText"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="5,2,5,2" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          TextElement.Foreground="{TemplateBinding Foreground}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background"
                                    Value="{StaticResource Calendar_ItemSelectedBackground_Colors}"/>
                            <Setter Property="Foreground"
                                    Value="{StaticResource Calendar_ItemSelectedForeground_Colors}"/>
                        </Trigger>
                        <Trigger Property="IsToday" Value="True">
                            <Setter Property="Background"
                                    Value="{StaticResource Calendar_ItemHighlighteBackground_Colors}"/>
                            <Setter Property="Foreground"
                                    Value="{StaticResource Calendar_ItemHighlighteForeground_Colors}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background"
                                    Value="{StaticResource Calendar_ItemMouseOverBackground_Colors}"/>
                            <Setter Property="Foreground"
                                    Value="{StaticResource Calendar_ItemMouseOverForeground_Colors}"/>
                        </Trigger>
                        <!--不可用日期-->
                        <Trigger Property="IsBlackedOut" Value="True">
                            <Setter Property="Opacity"
                                    Value="{StaticResource DisableOpacity_Key}"
                                    TargetName="Grid"/>
                        </Trigger>
                        <!--不在当月的日期-->
                        <Trigger Property="IsInactive" Value="True">
                            <Setter Property="Opacity" Value="0.65" TargetName="Grid"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity"
                                    Value="{StaticResource DisableOpacity_Key}"
                                    TargetName="Grid"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--日历日期面板样式-->
    <Style x:Key="CalendarItemStyle" TargetType="{x:Type CalendarItem}">
        <Setter Property="Margin" Value="0,1,0,1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CalendarItem}">
                    <ControlTemplate.Resources>
                        <!-- 头部星期样式-->
                        <DataTemplate x:Key="{x:Static CalendarItem.DayTitleTemplateResourceKey}">
                            <TextBlock Text="{Binding}" FontWeight="Bold"
                                       FontFamily="{StaticResource FontFamily_Key}"
                                       Foreground="{StaticResource PressedForeground_Colors}"
                                       FontSize="{StaticResource HeaderFontSize_Key}"
                                       HorizontalAlignment="Center" VerticalAlignment="Center"
                                       Margin="0,6,0,6" Opacity="0.8" />
                        </DataTemplate>
                    </ControlTemplate.Resources>
                    <Grid x:Name="PART_Root">
                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="1"
                                Background="{TemplateBinding Background}"
                                Margin="{TemplateBinding Margin}">
                            <Grid Margin="2">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>
                                <!--Header-->
                                <Grid Grid.Row="0" HorizontalAlignment="Stretch"
                                      Background="{StaticResource Calendar_HeaderBackground_Colors}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="2*"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <local:Buttonz x:Name="PART_HeaderButton"
                                                   FontWeight="Bold"
                                                   Style="{StaticResource ButtonzTransparencyStyle}"
                                                   Focusable="False" Grid.Column="1"
                                                   Iconz=""/>
                                    <local:Buttonz  x:Name="PART_PreviousButton"
                                                    Style="{StaticResource ButtonzTransparencyStyle}"
                                                    Focusable="False" Grid.Column="0"
                                                    IconzSize="18" Content=""
                                                    Iconz="&#xe251;"/>     <!--e251_向左实心三角-->
                                    <local:Buttonz  x:Name="PART_NextButton"
                                                    Style="{StaticResource ButtonzTransparencyStyle}"
                                                    Focusable="False" Grid.Column="2"
                                                    IconzSize="18" Content=""
                                                    Iconz="&#xe250;"/>     <!--e250_向右实心三角-->
                                </Grid>
                                <!--PART_MonthView-->
                                <Grid x:Name="PART_MonthView" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="6,1,6,6" Grid.Row="1" Visibility="Visible">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="*" />
                                    </Grid.RowDefinitions>
                                </Grid>
                                <!--PART_YearView-->
                                <Grid x:Name="PART_YearView" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="6,10,6,10" Grid.Row="1" Visibility="Hidden">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="*" />
                                    </Grid.RowDefinitions>
                                </Grid>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="PART_Root"
                                    Value="{StaticResource DisableOpacity_Key}" />
                        </Trigger>
                        <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" Value="Year">
                            <Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden" />
                            <Setter Property="Visibility" TargetName="PART_YearView" Value="Visible" />
                        </DataTrigger>
                        <!--Decade 美 ['dɛked] n. 十年，十年期；十-->
                        <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" Value="Decade">
                            <Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden" />
                            <Setter Property="Visibility" TargetName="PART_YearView" Value="Visible" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--年、月按钮样式-->
    <Style x:Key="CalendarButtonStyle" TargetType="{x:Type CalendarButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="MinWidth" Value="40" />
        <Setter Property="MinHeight" Value="42" />
        <Setter Property="FontSize" Value="{StaticResource FontSize_Key}" />
        <Setter Property="FontFamily" Value="{StaticResource FontFamily_Key}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CalendarButton}">
                    <Grid x:Name="Grid" Margin="{TemplateBinding Margin}">
                        <Border x:Name="Bg" Background="{TemplateBinding Background}" />
                        <ContentPresenter x:Name="NormalText"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="5,2,5,2"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          TextElement.Foreground="{TemplateBinding Foreground}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Background"
                                    Value="{StaticResource Calendar_ItemSelectedBackground_Colors}"/>
                            <Setter Property="Foreground"
                                    Value="{StaticResource Calendar_ItemSelectedForeground_Colors}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background"
                                    Value="{StaticResource Calendar_ItemMouseOverBackground_Colors}"/>
                            <Setter Property="Foreground"
                                    Value="{StaticResource Calendar_ItemMouseOverForeground_Colors}"/>
                        </Trigger>
                        <!--不在当月的日期-->
                        <Trigger Property="IsInactive" Value="True">
                            <Setter Property="Opacity" Value="0.8" TargetName="Grid"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity"
                                    Value="{StaticResource DisableOpacity_Key}"
                                    TargetName="Grid"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--默认日历样式-->
    <Style x:Key="CalendarDefaultStyle" TargetType="{x:Type Calendar}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Foreground" Value="{StaticResource TextForeground_Colors}" />
        <Setter Property="CalendarDayButtonStyle" Value="{StaticResource CalendarDayButtonStyle}" />
        <Setter Property="CalendarItemStyle" Value="{StaticResource CalendarItemStyle}" />
        <Setter Property="CalendarButtonStyle" Value="{StaticResource CalendarButtonStyle}" />
        <Setter Property="Background" Value="{StaticResource PopupBackground_Colors}" />
        <Setter Property="BorderBrush" Value="{StaticResource ControlBorderBrush_Colors}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontSize" Value="{StaticResource FontSize_Key}" />
        <Setter Property="FontFamily" Value="{StaticResource FontFamily_Key}" />
        <Setter Property="IsTodayHighlighted" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Calendar}">
                    <StackPanel x:Name="PART_Root" HorizontalAlignment="Center"
                                Background="Transparent">
                        <CalendarItem x:Name="PART_CalendarItem"
                                      BorderBrush="{TemplateBinding BorderBrush}"
                                      FontSize="{TemplateBinding FontSize}"
                                      FontFamily="{TemplateBinding FontFamily}"
                                      BorderThickness="{TemplateBinding BorderThickness}"
                                      Background="{TemplateBinding Background}"
                                      Style="{TemplateBinding CalendarItemStyle}" />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<Style TargetType="{x:Type Calendar}" BasedOn="{StaticResource CalendarDefaultStyle}"/>-->

    <!--**************** DatePicker     ****************************************-->
    <Style x:Key="DatePickerDefaultStyle" TargetType="{x:Type DatePicker}">
        <Setter Property="Foreground" Value="{StaticResource TextForeground_Colors}" />
        <Setter Property="Background" Value="{StaticResource TextBackground_Colors}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource ControlBorderBrush_Colors}" />
        <Setter Property="local:Attach.FocusBorderBrush" Value="{StaticResource FocusBorderBrush_Colors}" />
        <Setter Property="local:Attach.MouseOverBorderBrush" Value="{StaticResource MouseOverBorderBrush_Colors}" />
        <Setter Property="local:Attach.IconzSize" Value="18" />
        <Setter Property="FontFamily" Value="{StaticResource FontFamily_Key}" />
        <Setter Property="FontSize" Value="{StaticResource FontSize_Key}" />
        <Setter Property="MinHeight" Value="26" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Width" Value="200" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="IsTodayHighlighted" Value="True" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="SelectedDate" Value="{x:Null}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="CalendarStyle" Value="{StaticResource CalendarDefaultStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePicker}">
                    <Grid x:Name="PART_Root">
                        <Border x:Name="Bg" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" />
                        <Grid x:Name="PART_InnerGrid" Margin="0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <!--Label区域-->
                            <ContentControl x:Name="Label"
                                            Template="{TemplateBinding local:Attach.LabelTemplate}"
                                            IsTabStop="False" IsHitTestVisible="False"
                                            Content="{TemplateBinding local:Attach.Label}"
                                            Margin="2,1,0,1"/>
                            <!--附加内容区域-->
                            <Border x:Name="PART_AttachContent" Grid.Column="2" VerticalAlignment="Center" HorizontalAlignment="Center" >
                                <ContentControl VerticalAlignment="Center"
                                                VerticalContentAlignment="Center"
                                                Template="{TemplateBinding local:Attach.AttachContent}"/>
                            </Border>
                            <!--下拉按钮-->
                            <ToggleButton x:Name="PART_DropDownToggle" IsTabStop="False"
                                          Style="{StaticResource IconzStyleToggleButton}" 
                                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          Margin="2,1,2,1"
                                          Grid.Column="3"
                                          local:Attach.IconzSize="{TemplateBinding local:Attach.IconzSize}"
                                          Background="{TemplateBinding local:Attach.FocusBackground}"/>
                            <!--水印-->
                            <Border Grid.Column="1">
                                <TextBlock x:Name="Message"  Padding="0" Visibility="Collapsed" Text="{TemplateBinding local:Attach.Watermark}" 
                                           Foreground="{TemplateBinding Foreground}"
                                           IsHitTestVisible="False"
                                           Opacity="{StaticResource WatermarkOpacity_Key}"
                                           HorizontalAlignment="Left" TextAlignment="Center" 
                                           VerticalAlignment="Center" Margin="5,2,5,2" />
                            </Border>
                            <!--Date内容区-->
                            <Grid Grid.Column="1">
                                <TextBox x:Name="PART_TextBox"
                                         Style="{StaticResource TextBox_ShareEditableStyle}"
                                         HorizontalAlignment="Stretch" 
                                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                         IsHitTestVisible="True"
                                         IsReadOnly="False"
                                         FontFamily="{TemplateBinding FontFamily}"
                                         Foreground="{TemplateBinding Foreground}"
                                         FontSize="{TemplateBinding FontSize}"  
                                         Text="{Binding Path=SelectedDate,Mode=OneWay,
                                                StringFormat={}{0:yyyy-MM-dd},
                                                RelativeSource={RelativeSource TemplatedParent}}"/>
                            </Grid>
                            <!--弹出日历-->
                            <Popup x:Name="PART_Popup"
                                   AllowsTransparency="True"
                                   Placement="Bottom"
                                   PlacementTarget="{Binding ElementName=PART_Root}"
                                   StaysOpen="False" />
                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!--1.显示水印-->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                            <Setter TargetName="Message" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{Binding Path=(local:Attach.MouseOverBorderBrush),RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter  Property="BorderBrush" Value="{Binding Path=(local:Attach.FocusBorderBrush),RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter  Property="BorderBrush" Value="{Binding Path=(local:Attach.FocusBorderBrush),RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_Root" Property="Opacity" Value="{StaticResource DisableOpacity_Key}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DatePickerDateTimeStyle" TargetType="{x:Type DatePicker}">
        <Setter Property="Foreground" Value="{StaticResource TextForeground_Colors}" />
        <Setter Property="Background" Value="{StaticResource TextBackground_Colors}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource ControlBorderBrush_Colors}" />
        <Setter Property="local:Attach.FocusBorderBrush" Value="{StaticResource FocusBorderBrush_Colors}" />
        <Setter Property="local:Attach.MouseOverBorderBrush" Value="{StaticResource MouseOverBorderBrush_Colors}" />
        <Setter Property="local:Attach.IconzSize" Value="18" />
        <Setter Property="FontFamily" Value="{StaticResource FontFamily_Key}" />
        <Setter Property="FontSize" Value="{StaticResource FontSize_Key}" />
        <Setter Property="MinHeight" Value="26" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Width" Value="200" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="IsTodayHighlighted" Value="True" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="SelectedDate" Value="{x:Null}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="CalendarStyle" Value="{StaticResource CalendarDefaultStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePicker}">
                    <Grid x:Name="PART_Root">
                        <Border x:Name="Bg" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" />
                        <Grid x:Name="PART_InnerGrid" Margin="0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <!--Label区域-->
                            <ContentControl x:Name="Label"
                                            Template="{TemplateBinding local:Attach.LabelTemplate}"
                                            IsTabStop="False" IsHitTestVisible="False"
                                            Content="{TemplateBinding local:Attach.Label}"
                                            Margin="2,1,0,1"/>
                            <!--附加内容区域-->
                            <Border x:Name="PART_AttachContent" Grid.Column="2" VerticalAlignment="Center" HorizontalAlignment="Center" >
                                <ContentControl VerticalAlignment="Center"
                                                VerticalContentAlignment="Center"
                                                Template="{TemplateBinding local:Attach.AttachContent}"/>
                            </Border>
                            <!--下拉按钮-->
                            <ToggleButton x:Name="PART_DropDownToggle" IsTabStop="False"
                                          Style="{StaticResource IconzStyleToggleButton}" 
                                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          Margin="2,1,2,1"
                                          Grid.Column="3"
                                          local:Attach.IconzSize="{TemplateBinding local:Attach.IconzSize}"
                                          Background="{TemplateBinding local:Attach.FocusBackground}"/>
                            <!--水印-->
                            <Border Grid.Column="1">
                                <TextBlock x:Name="Message"  Padding="0" Visibility="Collapsed" Text="{TemplateBinding local:Attach.Watermark}" 
                                           Foreground="{TemplateBinding Foreground}"
                                           IsHitTestVisible="False"
                                           Opacity="{StaticResource WatermarkOpacity_Key}"
                                           HorizontalAlignment="Left" TextAlignment="Center" 
                                           VerticalAlignment="Center" Margin="5,2,5,2" />
                            </Border>
                            <!--Date内容区(DateTime格式)-->
                            <Grid Grid.Column="1">
                                <TextBox x:Name="PART_TextBox"
                                         Style="{StaticResource TextBox_ShareEditableStyle}"
                                         HorizontalAlignment="Stretch" 
                                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                         IsHitTestVisible="True"
                                         IsReadOnly="False"
                                         FontFamily="{TemplateBinding FontFamily}"
                                         Foreground="{TemplateBinding Foreground}"
                                         FontSize="{TemplateBinding FontSize}"
                                         Text="{Binding Path=SelectedDate,
                                                StringFormat={}{0:yyyy-MM-dd HH:mm:ss},
                                                RelativeSource={RelativeSource  AncestorType={x:Type DatePicker}}}"/>
                            </Grid>
                            <!--弹出日历-->
                            <Popup x:Name="PART_Popup"
                                   AllowsTransparency="True"
                                   Placement="Bottom"
                                   PlacementTarget="{Binding ElementName=PART_Root}"
                                   StaysOpen="False" />
                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!--1.显示水印-->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                            <Setter TargetName="Message" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{Binding Path=(local:Attach.MouseOverBorderBrush),RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter  Property="BorderBrush" Value="{Binding Path=(local:Attach.FocusBorderBrush),RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter  Property="BorderBrush" Value="{Binding Path=(local:Attach.FocusBorderBrush),RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_Root" Property="Opacity" Value="{StaticResource DisableOpacity_Key}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--DatePicker包含附加属性Label的样式 -->
    <Style x:Key="DatePickerLabelStyle" TargetType="{x:Type DatePicker}" BasedOn="{StaticResource DatePickerDefaultStyle}">
        <Setter Property="Width" Value="260"/>
        <Setter Property="local:Attach.LabelTemplate" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Border Width="Auto" Background="{StaticResource TextLabelBackground_Colors}">
                        <TextBlock VerticalAlignment="Center"
                                   HorizontalAlignment="Right"
                                   Margin="2" Text="{TemplateBinding Content}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--DataTime格式的DatePicker包含附加属性Label的样式 -->
    <Style x:Key="DatePickerDateTimeLabelStyle" TargetType="{x:Type DatePicker}" BasedOn="{StaticResource DatePickerDateTimeStyle}">
        <Setter Property="Width" Value="260"/>
        <Setter Property="local:Attach.LabelTemplate" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Border Width="Auto" Background="{StaticResource TextLabelBackground_Colors}">
                        <TextBlock VerticalAlignment="Center"
                                   HorizontalAlignment="Right"
                                   Margin="2" Text="{TemplateBinding Content}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<Style TargetType="{x:Type DatePicker}" BasedOn="{StaticResource DatePickerDefaultStyle}" />-->


    <!--**************** HighTextBlock  ****************************************-->
    <!--<Style TargetType="local:HighTextBlock">
        <Setter Property="Foreground" Value="{StaticResource TextForeground_Colors}"/>
        <Setter Property="FontFamily" Value="{StaticResource FontFamily_Key}"/>
        <Setter Property="FontSize" Value="{StaticResource FontSize_Key}"/>
        <Setter Property="HighForeground" Value="{StaticResource Calendar_ItemHighlighteForeground_Colors}"/>
        <Setter Property="HighBackground" Value="{StaticResource Calendar_ItemHighlighteBackground_Colors}"/>
    </Style>-->

    
    <!--************************    ListBox    *************************-->
    <Style x:Key="ListBoxItemDefaultStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Foreground" Value="{DynamicResource TextForeground_Colors}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <!--<Setter Property="VerticalContentAlignment" Value="Center" />-->
        <Setter Property="MinHeight" Value="25" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="3,0,0,0" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{StaticResource ItemSelectedBackground_Colors}" />
                            <Setter Property="Foreground"
                                    Value="{StaticResource ItemSelectedForeground_Colors}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background"
                                    Value="{StaticResource ItemMouseOverBackground_Colors}" />
                            <Setter Property="Foreground"
                                    Value="{StaticResource ItemMouseOverForeground_Colors}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Opacity"
                                    Value="{StaticResource DisableOpacity_Key}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--ListBoxItemRadioButtonStyle-->
    <Style x:Key="ListBoxItemRadioButtonStyle" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource ListBoxItemDefaultStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <RadioButton IsChecked="{Binding IsSelected,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}">
                            <RadioButton.Content>
                                <ContentPresenter Margin="{TemplateBinding Padding}"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </RadioButton.Content>
                        </RadioButton>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background"
                                    Value="{StaticResource ItemSelectedBackground_Colors}" />
                            <Setter Property="Foreground"
                                    Value="{StaticResource ItemSelectedForeground_Colors}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background"
                                    Value="{StaticResource ItemMouseOverBackground_Colors}" />
                            <Setter Property="Foreground"
                                    Value="{StaticResource ItemMouseOverForeground_Colors}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Opacity"
                                    Value="{StaticResource DisableOpacity_Key}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ListBoxDefaultStyle" TargetType="{x:Type ListBox}">
        <Setter Property="BorderBrush" Value="{StaticResource ControlBorderBrush_Colors}" />
        <Setter Property="Background" Value="{StaticResource ItemsContentBackground_Colors}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemDefaultStyle}"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer>
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Opacity"
                                    Value="{StaticResource DisableOpacity_Key}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--支持虚拟化的ListBox-->
    <Style x:Key="ListBoxVirtualStyle" TargetType="{x:Type ListBox}" BasedOn="{StaticResource ListBoxDefaultStyle}">
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True"/>
        <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling" />
        <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="False" />
    </Style>

    <!--<Style TargetType="{x:Type ListBox}" BasedOn="{StaticResource ListBoxDefaultStyle}"/>-->



    <!--**************** Menu           ****************************************-->
    <!--菜单项MenuItem样式MenuItemIconzStyle-->
    <Style x:Key="MenuItemIconzStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="BorderBrush" Value="{StaticResource MenuBorderBrush_Colors}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{StaticResource MenuBackground_Colors}"/>
        <Setter Property="Foreground" Value="{StaticResource MenuForeground_Colors}"/>
        <Setter Property="FontSize" Value="{StaticResource FontSize_Key}"/>
        <Setter Property="Height" Value="28"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Margin" Value="1"/>
        <Setter Property="local:Attach.IconzSize" Value="18"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <!--Item-->
                    <Border  x:Name="border"
                             Background="Transparent"
                             Height="{TemplateBinding Height}"
                             Opacity="1">
                        <Grid  VerticalAlignment="Center" Margin="{TemplateBinding Margin}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="icon_col"
                                                  MaxWidth="35"
                                                  SharedSizeGroup="MenuItemIconColumnGroup"/>
                                <ColumnDefinition Width="Auto"
                                                  SharedSizeGroup="MenuTextColumnGroup"/>
                                <ColumnDefinition Width="Auto"
                                                  SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                <ColumnDefinition Width="16"
                                                  x:Name="arrow_col"
                                                  SharedSizeGroup="MenumItemArrow"/>
                            </Grid.ColumnDefinitions>
                            <!--icon-->
                            <TextBlock x:Name="PART_Icon"
                                       Text="{TemplateBinding Icon}"
                                       Foreground="{TemplateBinding Foreground}"
                                       Margin="5,1,1,1"
                                       Style="{StaticResource IconzStyle}"
                                       FontSize="{TemplateBinding local:Attach.IconzSize}"/>
                            <!--Header-->
                            <ContentPresenter Grid.Column="1"
                                              x:Name="txtHeader"
                                              Margin="3,1,5,1"
                                              MinWidth="90"
                                              RecognizesAccessKey="True"
                                              VerticalAlignment="Center"
                                              ContentSource="Header"/>
                            <!--快捷键 InputGestureText 暂不支持 -->
                            <TextBlock Grid.Column="2" Margin="3,1,3,1" x:Name="IGTHost"
                                       Text="{TemplateBinding InputGestureText}" 
                                       FontSize="{TemplateBinding FontSize}"
                                       VerticalAlignment="Center" Visibility="Visible"
                                       Foreground="{TemplateBinding Foreground}" />
                            <!--右指针-->
                            <TextBlock x:Name="PART_Arrow" Grid.Column="3"
                                       Text="&#xe250;"
                                       Style="{StaticResource IconzStyle}"
                                       Foreground="{TemplateBinding Foreground}" 
                                       FontSize="12"/>
                            <!--淡出子菜单容器-->
                            <Popup x:Name="SubMenuPopup" AllowsTransparency="true"
                                   IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                                   Placement="Bottom"
                                   Focusable="false"
                                   VerticalOffset="0"
                                   PopupAnimation="{StaticResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                <Border Background="{TemplateBinding Background}"
                                        CornerRadius="0" Margin="5"
                                        Effect="{StaticResource DefaultDropShadow_Colors}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}">
                                    <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True">
                                        <StackPanel Margin="0" IsItemsHost="True"
                                                    KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                    </Grid>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--TopLevelHeader:第一级菜单（有子菜单）-->
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_Arrow"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                            <Setter Property="Margin" Value="5,1,1,1" TargetName="PART_Icon"/>
                            <Setter Property="Margin" Value="1,1,6,1" TargetName="txtHeader"/>
                            <Setter Property="MinWidth" Value="10" TargetName="txtHeader"/>
                            <Setter Property="Width" Value="0" TargetName="arrow_col"/>
                        </Trigger>
                        <!--TopLevelItem 第一级菜单（无子级）-->
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_Arrow"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                            <Setter Property="Margin" Value="5,1,1,1" TargetName="PART_Icon"/>
                            <Setter Property="Margin" Value="1,1,6,1" TargetName="txtHeader"/>
                            <Setter Property="MinWidth" Value="10" TargetName="txtHeader"/>
                            <Setter Property="Width" Value="0" TargetName="arrow_col"/>
                        </Trigger>
                        <!--SubmenuHeader:子菜单，有子菜单-->
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_Arrow"/>
                            <Setter Property="Placement" Value="Right" TargetName="SubMenuPopup"/>
                        </Trigger>
                        <!--SubMenuItem:子菜单，无子级-->
                        <Trigger Property="Role" Value="SubMenuItem">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_Arrow"/>
                        </Trigger>
                        <!--选中状态，优先级将高于Icon-->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="PART_Icon" Property="Text" Value="&#xe013;"/>
                            <Setter TargetName="PART_Icon" Property="FontSize" Value="12"/>
                            <Setter TargetName="PART_Icon"
                                    Property="Foreground" Value="{StaticResource CheckedForeground_Colors}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border"
                                    Property="Opacity"  Value="{StaticResource DisableOpacity_Key}"/>
                        </Trigger>
                        <!--高亮状态-->
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Background" TargetName="border"
                                    Value="{StaticResource MenuMouseOverBackground_Colors}"/>
                            <Setter Property="Foreground"
                                    Value="{StaticResource MenuMouseOverForeground_Colors}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border"
                                    Value="{StaticResource MenuPressedBackground_Colors}"/>
                            <Setter Property="Foreground"
                                    Value="{StaticResource MenuPressedForeground_Colors}"/>
                        </Trigger>
                        <!--子菜单打开状态-->
                        <Trigger Property="IsSubmenuOpen" Value="true" >
                            <Setter TargetName="PART_Arrow"
                                    Property="Foreground"
                                    Value="{StaticResource CheckedForeground_Colors}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--基于MenuItemIconzStyle的默认样式，提供Header模板-->
    <Style x:Key="MenuItemDefaultStyle" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource MenuItemIconzStyle}">
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock x:Name="txtHeader"
                               FontSize="{Binding FontSize,RelativeSource={RelativeSource AncestorType={x:Type MenuItem},Mode=FindAncestor}}"
                               HorizontalAlignment="Stretch" Margin="3,1,5,1"
                               Text="{Binding Header,RelativeSource={RelativeSource AncestorType={x:Type MenuItem},Mode=FindAncestor}}" VerticalAlignment="Center"
                               Foreground="{Binding Foreground,RelativeSource={RelativeSource AncestorType={x:Type MenuItem},Mode=FindAncestor}}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--背景透明的HeaderItem样式,带旋转动画-->
    <Style x:Key="MenuItemTransparentHeaderStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="BorderBrush" Value="{StaticResource MenuBorderBrush_Colors}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{StaticResource MenuBackground_Colors}"/>
        <Setter Property="Foreground" Value="{StaticResource TextForeground_Colors}"/>
        <Setter Property="FontSize" Value="{StaticResource FontSize_Key}"/>
        <Setter Property="Margin" Value="2,0,2,0"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="local:Attach.IconzSize" Value="18"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Grid x:Name="Bg" VerticalAlignment="{TemplateBinding VerticalAlignment}">
                        <StackPanel Orientation="Horizontal"
                                    x:Name="border"
                                    VerticalAlignment="Center"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                            <!--icon-->
                            <TextBlock x:Name="PART_Icon"
                                       Text="{TemplateBinding Icon}"
                                       Foreground="{TemplateBinding Foreground}" 
                                       local:Attach.AllowsAnimation="{Binding IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
                                       Style="{StaticResource IconzStyle}"
                                       FontSize="{TemplateBinding local:Attach.IconzSize}"/>
                            <TextBlock x:Name="txtHeader" Margin="1"
                                       FontSize="{TemplateBinding FontSize}"
                                       HorizontalAlignment="Stretch" 
                                       Text="{TemplateBinding Header}"
                                       VerticalAlignment="Center" Grid.Column="1"
                                       Foreground="{TemplateBinding Foreground}"/>
                        </StackPanel>
                        <!--淡出子集菜单容器-->
                        <Popup x:Name="SubMenuPopup" AllowsTransparency="true"
                               IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                               Placement="Bottom"
                               Focusable="false"
                               VerticalOffset="0"
                               PopupAnimation="{StaticResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                            <Border Background="{TemplateBinding Background}"
                                    CornerRadius="0" Margin="5"
                                    Effect="{StaticResource DefaultDropShadow_Colors}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}">
                                <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True">
                                    <StackPanel Margin="0"
                                                IsItemsHost="True"
                                                KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                </Grid>
                            </Border>
                        </Popup>
                    </Grid>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--高亮状态-->
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Foreground"
                                    Value="{StaticResource MouseOverForeground_Colors}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground"
                                    Value="{StaticResource PressedForeground_Colors}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border"
                                    Value="{StaticResource DisableOpacity_Key}"
                                    Property="Opacity"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--默认Menu样式-->
    <Style x:Key="MenuDefaultStyle" TargetType="{x:Type Menu}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource MenuItemDefaultStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <ItemsPresenter Margin="0"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource MenuItemDefaultStyle}"/>-->
    <!--<Style TargetType="{x:Type Menu}" BasedOn="{StaticResource MenuDefaultStyle}"/>-->


    <!--**************** ContextMenu    ****************************************-->
    <!--默认右键菜单ContextMenu样式-->
    <Style x:Key="ContextMenuDefaultStyle" TargetType="{x:Type ContextMenu}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
        <Setter Property="BorderBrush" Value="{DynamicResource MenuBorderBrush_Colors}"/>
        <Setter Property="Background" Value="{DynamicResource MenuBackground_Colors}"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource MenuForeground_Colors}"/>
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="True" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource MenuItemDefaultStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Grid>
                        <Border x:Name="Border"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Margin="5"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <ItemsPresenter x:Name="ItemsPresenter"
                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                            Grid.IsSharedSizeScope="True" Margin="0"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                            KeyboardNavigation.TabNavigation="Cycle" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="True">
                            <Setter TargetName="Border"
                                    Property="Effect" Value="{DynamicResource DefaultDropShadow_Colors}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource ContextMenuDefaultStyle}"/>
    <!--文本操作右键菜单-->
    <ContextMenu x:Key="TextBoxContextMenu" Style="{StaticResource ContextMenuDefaultStyle}">
        <MenuItem Command="ApplicationCommands.Cut" Icon="&#xe226;" Style="{StaticResource MenuItemDefaultStyle}" />
        <MenuItem Command="ApplicationCommands.Copy" Icon="&#xe224;" Style="{StaticResource MenuItemDefaultStyle}" />
        <MenuItem Command="ApplicationCommands.Paste" Icon="&#xe225;" Style="{StaticResource MenuItemDefaultStyle}" />
    </ContextMenu>


    <!--**************** PasswordBox    ****************************************-->
    <!--PasswordBox默认样式-->
    <Style x:Key="PasswordBoxDefaultStyle" TargetType="{x:Type PasswordBox}">
        <Setter Property="ContextMenu" Value="{StaticResource TextBoxContextMenu}" />
        <Setter Property="SelectionBrush" Value="{StaticResource TextSelectionBrush_Colors}" />
        <Setter Property="FontFamily" Value="{StaticResource FontFamily_Key}" />
        <Setter Property="FontSize" Value="{StaticResource FontSize_Key}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="PasswordChar" Value="●"/>
        <Setter Property="Height" Value="30" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Background" Value="{StaticResource TextBackground_Colors}" />
        <Setter Property="Foreground" Value="{StaticResource TextForeground_Colors}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderBrush" Value="{StaticResource ControlBorderBrush_Colors}" />
        <Setter Property="local:Attach.FocusBorderBrush"
                Value="{DynamicResource FocusBorderBrush_Colors}" />
        <Setter Property="local:Attach.MouseOverBorderBrush"
                Value="{DynamicResource MouseOverBorderBrush_Colors}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <!-- change SnapsToDevicePixels to True to view a better border and validation error -->
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <!--英 ['kærət]  美 ['kærət]  插入符号-->
        <Setter Property="CaretBrush" Value="{StaticResource TextForeground_Colors}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Grid x:Name="PART_Root">
                        <Border x:Name="Bg"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                CornerRadius="{TemplateBinding local:Attach.CornerRadius}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" />
                        <Grid x:Name="PART_InnerGrid">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition  Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition  Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <!--Label区域-->
                            <ContentControl x:Name="Label" Margin="1"
                                            Template="{TemplateBinding local:Attach.LabelTemplate}"
                                            Content="{TemplateBinding local:Attach.Label}"/>
                            <!--内容区域-->
                            <ScrollViewer x:Name="PART_ContentHost"
                                          BorderThickness="0" Grid.Column="1"
                                          IsTabStop="False" Margin="2"
                                          VerticalAlignment="Stretch" Background="{x:Null}" />
                            <!--附加内容区域-->
                            <Border x:Name="PART_AttachContent" Grid.Column="2" Margin="2"
                                    VerticalAlignment="Center" HorizontalAlignment="Center" >
                                <ContentControl VerticalAlignment="Center"
                                                VerticalContentAlignment="Center"
                                                Template="{TemplateBinding local:Attach.AttachContent}" />
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush"
                                    Value="{Binding Path=(local:Attach.MouseOverBorderBrush),RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter  Property="BorderBrush"
                                     Value="{Binding Path=(local:Attach.FocusBorderBrush),RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                        <!--不可用-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_Root"
                                    Property="Opacity"
                                    Value="{StaticResource DisableOpacity_Key}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--PasswordBox包含附加属性Label的样式-->
    <Style x:Key="PasswordBoxLabelStyle" TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource PasswordBoxDefaultStyle}">
        <Setter Property="local:Attach.LabelTemplate" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Border Width="Auto"
                            Background="{StaticResource TextLabelBackground_Colors}">
                        <TextBlock VerticalAlignment="Center" HorizontalAlignment="Right"
                                   Margin="3" Text="{TemplateBinding Content}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<Style TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource PasswordBoxDefaultStyle}"/>-->



    <!--**************** ProgressBar    ****************************************-->
    <!--ProgressBar Style-->
    <Style x:Key="ProgressBarSimpleStyle" TargetType="{x:Type ProgressBar}">
        <Setter Property="Background" Value="{StaticResource ControlBorderBrush_Colors}" />
        <Setter Property="Maximum" Value="1" />
        <Setter Property="Value" Value="0" />
        <Setter Property="Height" Value="10" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Foreground" Value="{StaticResource FocusBorderBrush_Colors}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="local:Attach.CornerRadius" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="Root" >
                        <Border x:Name="PART_Track"
                                Background="{TemplateBinding Background}" 
                                CornerRadius="{TemplateBinding local:Attach.CornerRadius}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        <Border  x:Name="PART_Indicator"
                                 HorizontalAlignment="Left"
                                 Background="{TemplateBinding Foreground}" 
                                 CornerRadius="{TemplateBinding local:Attach.CornerRadius}"
                                 SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="Root" >
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!--*************** Progressz       ****************************************-->
    <Style TargetType="{x:Type local:Progressz}">
        <Setter Property="Foreground" Value="{StaticResource TextForeground_Colors}" />
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="MinWidth" Value="20" />
        <Setter Property="Height" Value="60" />
        <Setter Property="Width" Value="60" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:Progressz}">
                    <Border Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <Border.Resources>
                            <Style x:Key="ProgressRingEllipseStyle" TargetType="{x:Type Ellipse}">
                                <Setter Property="Opacity" Value="0" />
                                <Setter Property="HorizontalAlignment" Value="Left" />
                                <Setter Property="VerticalAlignment" Value="Top" />
                            </Style>
                        </Border.Resources>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="SizeStates">
                                <VisualState x:Name="Large">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="SixthCircle"
                                                                       Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Small" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualState x:Name="Inactive" />
                                <VisualState x:Name="Active">
                                    <Storyboard RepeatBehavior="Forever">
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="Ring"
                                                                       Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="E1" Storyboard.TargetProperty="Opacity" BeginTime="0">
                                            <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.21" Value="1" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.22" Value="0" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.47" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="E2"
                                                                       Storyboard.TargetProperty="Opacity" BeginTime="00:00:00.167">
                                            <DiscreteDoubleKeyFrame KeyTime="0"  Value="1" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.21" Value="1" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.22" Value="0" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.47" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="E3"
                                                                       Storyboard.TargetProperty="Opacity"  BeginTime="00:00:00.334">
                                            <DiscreteDoubleKeyFrame KeyTime="0"  Value="1" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.21"  Value="1" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.22"  Value="0" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.47"  Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="E4"
                                                                       Storyboard.TargetProperty="Opacity"  BeginTime="00:00:00.501">
                                            <DiscreteDoubleKeyFrame KeyTime="0"  Value="1" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.21"  Value="1" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.22"  Value="0" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.47"  Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="E5"
                                                                       Storyboard.TargetProperty="Opacity"  BeginTime="00:00:00.668">
                                            <DiscreteDoubleKeyFrame KeyTime="0"  Value="1" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.21"  Value="1" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.22"  Value="0" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.47"  Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="E6"
                                                                       Storyboard.TargetProperty="Opacity"  BeginTime="00:00:00.835">
                                            <DiscreteDoubleKeyFrame KeyTime="0"   Value="1" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.21"   Value="1" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.22"  Value="0" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.47"   Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="E1R"
                                                                       BeginTime="0"
                                                                       Storyboard.TargetProperty="Angle">
                                            <SplineDoubleKeyFrame KeyTime="0"  Value="-110" KeySpline="0.13,0.21,0.1,0.7" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.433" Value="10" KeySpline="0.02,0.33,0.38,0.77" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.2" Value="93" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.617" Value="205" KeySpline="0.57,0.17,0.95,0.75" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:2.017" Value="357" KeySpline="0,0.19,0.07,0.72" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:2.783" Value="439" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:3.217" Value="585" KeySpline="0,0,0.95,0.37" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="E2R"
                                                                       BeginTime="00:00:00.167" Storyboard.TargetProperty="Angle">
                                            <SplineDoubleKeyFrame KeyTime="0"  Value="-116" KeySpline="0.13,0.21,0.1,0.7" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.433"   Value="4"  KeySpline="0.02,0.33,0.38,0.77" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.2"  Value="87" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.617"  Value="199"   KeySpline="0.57,0.17,0.95,0.75" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:2.017"  Value="351"  KeySpline="0,0.19,0.07,0.72" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:2.783"  Value="433" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:3.217"  Value="579"  KeySpline="0,0,0.95,0.37" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="E3R"  BeginTime="00:00:00.334"
                                                                       Storyboard.TargetProperty="Angle">
                                            <SplineDoubleKeyFrame KeyTime="0"  Value="-122"  KeySpline="0.13,0.21,0.1,0.7" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.433"   Value="-2"  KeySpline="0.02,0.33,0.38,0.77" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.2"  Value="81" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.617"  Value="193"  KeySpline="0.57,0.17,0.95,0.75" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:2.017"  Value="345"  KeySpline="0,0.19,0.07,0.72" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:2.783" Value="427" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:3.217"   Value="573"  KeySpline="0,0,0.95,0.37" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="E4R"
                                                                       BeginTime="00:00:00.501"  Storyboard.TargetProperty="Angle">
                                            <SplineDoubleKeyFrame KeyTime="0"   Value="-128"   KeySpline="0.13,0.21,0.1,0.7" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.433"  Value="-8"  KeySpline="0.02,0.33,0.38,0.77" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.2"  Value="75" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.617"   Value="187"  KeySpline="0.57,0.17,0.95,0.75" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:2.017" Value="339" KeySpline="0,0.19,0.07,0.72" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:2.783" Value="421" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:3.217"  Value="567" KeySpline="0,0,0.95,0.37" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="E5R"
                                                                       BeginTime="00:00:00.668" Storyboard.TargetProperty="Angle">
                                            <SplineDoubleKeyFrame KeyTime="0"  Value="-134"  KeySpline="0.13,0.21,0.1,0.7" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.433"  Value="-14"  KeySpline="0.02,0.33,0.38,0.77" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.2"  Value="69" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.617"  Value="181" KeySpline="0.57,0.17,0.95,0.75" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:2.017" Value="331"  KeySpline="0,0.19,0.07,0.72" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:2.783" Value="415" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:3.217" Value="561"  KeySpline="0,0,0.95,0.37" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="E6R" BeginTime="00:00:00.835"
                                                                       Storyboard.TargetProperty="Angle">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="-140"  KeySpline="0.13,0.21,0.1,0.7" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.433"  Value="-20"  KeySpline="0.02,0.33,0.38,0.77" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.2" Value="63" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.617" Value="175" KeySpline="0.57,0.17,0.95,0.75" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:2.017" Value="325"  KeySpline="0,0.19,0.07,0.72" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:2.783" Value="409" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:3.217"  Value="555"  KeySpline="0,0,0.95,0.37" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid x:Name="Ring"
                              Margin="{TemplateBinding Padding}"
                              MaxWidth="{Binding MaxSideLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                              MaxHeight="{Binding MaxSideLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                              Visibility="Collapsed"
                              RenderTransformOrigin="0.5,0.5"
                              FlowDirection="LeftToRight">

                            <Canvas RenderTransformOrigin="0.5,0.5">
                                <Canvas.RenderTransform>
                                    <RotateTransform x:Name="E1R" />
                                </Canvas.RenderTransform>
                                <Ellipse x:Name="E1"
                                         Style="{StaticResource ProgressRingEllipseStyle}"
                                         Width="{Binding EllipseDiameter, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                         Height="{Binding EllipseDiameter, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                         Margin="{Binding EllipseOffset, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                         Fill="{TemplateBinding Foreground}" />
                            </Canvas>
                            <Canvas RenderTransformOrigin=".5,.5">
                                <Canvas.RenderTransform>
                                    <RotateTransform x:Name="E2R" />
                                </Canvas.RenderTransform>
                                <Ellipse x:Name="E2"
                                         Style="{StaticResource ProgressRingEllipseStyle}"
                                         Width="{Binding EllipseDiameter, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                         Height="{Binding EllipseDiameter, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                         Margin="{Binding EllipseOffset, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                         Fill="{TemplateBinding Foreground}" />
                            </Canvas>
                            <Canvas RenderTransformOrigin=".5,.5">
                                <Canvas.RenderTransform>
                                    <RotateTransform x:Name="E3R" />
                                </Canvas.RenderTransform>
                                <Ellipse x:Name="E3"
                                         Style="{StaticResource ProgressRingEllipseStyle}"
                                         Width="{Binding EllipseDiameter, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                         Height="{Binding EllipseDiameter, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                         Margin="{Binding EllipseOffset, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                         Fill="{TemplateBinding Foreground}" />
                            </Canvas>
                            <Canvas RenderTransformOrigin=".5,.5">
                                <Canvas.RenderTransform>
                                    <RotateTransform x:Name="E4R" />
                                </Canvas.RenderTransform>
                                <Ellipse x:Name="E4"
                                         Style="{StaticResource ProgressRingEllipseStyle}"
                                         Width="{Binding EllipseDiameter, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                         Height="{Binding EllipseDiameter, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                         Margin="{Binding EllipseOffset, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                         Fill="{TemplateBinding Foreground}" />
                            </Canvas>
                            <Canvas RenderTransformOrigin=".5,.5">
                                <Canvas.RenderTransform>
                                    <RotateTransform x:Name="E5R" />
                                </Canvas.RenderTransform>
                                <Ellipse x:Name="E5"
                                         Style="{StaticResource ProgressRingEllipseStyle}"
                                         Width="{Binding EllipseDiameter, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                         Height="{Binding EllipseDiameter, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                         Margin="{Binding EllipseOffset, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                         Fill="{TemplateBinding Foreground}" />
                            </Canvas>
                            <Canvas RenderTransformOrigin=".5,.5"
                                    Visibility="Collapsed"
                                    x:Name="SixthCircle">
                                <Canvas.RenderTransform>
                                    <RotateTransform x:Name="E6R" />
                                </Canvas.RenderTransform>
                                <Ellipse x:Name="E6"
                                         Style="{StaticResource ProgressRingEllipseStyle}"
                                         Width="{Binding EllipseDiameter, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                         Height="{Binding EllipseDiameter, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                         Margin="{Binding EllipseOffset, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                         Fill="{TemplateBinding Foreground}" />
                            </Canvas>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!--*************** RadioButton     ****************************************-->
    <!--默认样式-->
    <Style x:Key="RadioButtonDefaultStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource TextForeground_Colors}"/>
        <Setter Property="Padding" Value="0"></Setter>
        <Setter Property="local:Attach.IconzMargin" Value="1, 1, 3, 1"/>
        <Setter Property="local:Attach.IconzSize" Value="20"/>
        <Setter Property="FontSize" Value="{StaticResource FontSize_Key}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="grid" Margin="{TemplateBinding Padding}"
                          VerticalAlignment="Center">
                        <StackPanel Orientation="Horizontal"
                                    VerticalAlignment="Center">
                            <TextBlock x:Name="icon" Text="&#xe04a;" Style="{StaticResource IconzStyle}"
                                       SnapsToDevicePixels="True"
                                       FontSize="{TemplateBinding local:Attach.IconzSize}"
                                        Margin="{TemplateBinding local:Attach.IconzMargin}"
                                        Foreground="{TemplateBinding Foreground}"/>
                            <ContentPresenter VerticalAlignment="Center"/>
                        </StackPanel>
                    </Grid>
                    <!--触发器：设置选中状态符号-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Text" Value="&#xe04b;" TargetName="icon" />
                            <Setter Property="Foreground" Value="{StaticResource RadioButtonCheckedForeground_Colors}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{StaticResource RadioButtonMouseOverForeground_Colors}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{StaticResource DisableOpacity_Key}" TargetName="grid" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RadioButtonBoxStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource TextForeground_Colors}"/>
        <Setter Property="Padding" Value="3 2 3 2"></Setter>
        <Setter Property="FontSize" Value="{StaticResource FontSize_Key}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Height" Value="auto"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="BorderBrush" Value="{StaticResource ControlBorderBrush_Colors}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="grid" VerticalAlignment="Center">
                        <Border BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Height="{TemplateBinding Height}"
                                HorizontalAlignment="Center"
                                Background="{TemplateBinding Background}"
                                Width="{TemplateBinding Width}">
                            <ContentPresenter VerticalAlignment="Center"
                                              HorizontalAlignment="Center"
                                              Margin="{TemplateBinding Padding}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <!--选中的状态标识-->
                        <TextBlock Text="&#xe04e;" x:Name="checkState" Style="{StaticResource IconzStyle}"
                                   VerticalAlignment="Bottom" Visibility="Collapsed"
                                   FontSize="{StaticResource FontSize_Key}"
                                   Margin="1" HorizontalAlignment="Right"
                                   Foreground="{StaticResource RadioButtonCheckedForeground_Colors}"/>
                    </Grid>
                    <!--触发器：设置选中状态符号-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Visibility" Value="Visible"
                                    TargetName="checkState" />
                            <Setter Property="BorderBrush" Value="{StaticResource RadioButtonCheckedForeground_Colors}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" Value="{StaticResource RadioButtonMouseOverForeground_Colors}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{StaticResource DisableOpacity_Key}" TargetName="grid" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource RadioButtonDefaultStyle}"/>-->



    <!--*************** ScrollViewer    ****************************************-->
    <sys:Double x:Key="ScrollBarSize">12</sys:Double>
    <!--滚动两边按钮样式-->
    <Style x:Key="ScrollBarButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource TextForeground_Colors}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Width" Value="auto"/>
        <Setter Property="Height" Value="auto"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <TextBlock x:Name="icon"
                               FontSize="12"
                               Text="{TemplateBinding local:Attach.Iconz}"
                               Style="{StaticResource IconzStyle}"
                               Margin="1" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground"
                                    Value="{StaticResource MouseOverForeground_Colors}"
                                    TargetName="icon"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground"
                                    Value="{StaticResource PressedForeground_Colors}"
                                    TargetName="icon"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5" TargetName="icon"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--滚动条滑块两边按钮样式-->
    <Style x:Key="ScrollBarTrackButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--滚动条滑块样式-->
    <ControlTemplate x:Key="ThumbTemplate" TargetType="{x:Type Thumb}">
        <Grid>
            <Border x:Name="part_Bg" CornerRadius="4" Margin="1"
                    SnapsToDevicePixels="True"
                    Background="{StaticResource ScrollBarForeround_Colors}">
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="part_Bg" Property="Background"
                        Value="{StaticResource MouseOverForeground_Colors}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="part_Bg" Property="Opacity" Value="0.5"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--水平滚动条模板-->
    <ControlTemplate x:Key="HorizontalScrollBarTemplate" TargetType="{x:Type ScrollBar}">
        <Grid x:Name="HorizontalRoot" Height="{TemplateBinding Height}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <!--外部背景,好像不用更好看-->
            <!--<Border x:Name="Bg" Grid.Column="0" Grid.ColumnSpan="3" CornerRadius="0"  Opacity="0" Background="#858585"/>-->
            <!--内部背景-->
            <Border x:Name="BgInner" Grid.Column="1"
                    Margin="0" SnapsToDevicePixels="True"
                    Opacity="0.3"  CornerRadius="6"
                    Background="{StaticResource ScrollBarBackground_Colors}"/>
            <!--左按钮-->
            <Border Grid.Column="0" VerticalAlignment="Center" HorizontalAlignment="Center">
                <RepeatButton  local:Attach.Iconz="&#xe251;"
                               Style="{StaticResource ScrollBarButtonStyle}"
                               x:Name="HorizontalSmallDecrease"
                               IsTabStop="False" Interval="50" Margin="0,1,0,0"
                               Command="ScrollBar.LineLeftCommand"/>
            </Border>
            <!--中间滑动区域-->
            <Track x:Name="PART_Track" IsDirectionReversed="False" Grid.Column="1">
                <!--左滑块-->
                <Track.DecreaseRepeatButton>
                    <RepeatButton x:Name="HorizontalLargeDecrease"
                                  Command="ScrollBar.PageLeftCommand"
                                  IsTabStop="False" Interval="50"
                                  Style="{StaticResource ScrollBarTrackButtonStyle}" />
                </Track.DecreaseRepeatButton>
                <!--中间滑块 Margin="1" VerticalAlignment="Center" VerticalContentAlignment="Center" -->
                <Track.Thumb>
                    <Thumb Template="{StaticResource ThumbTemplate}" />
                </Track.Thumb>
                <!--右滑块-->
                <Track.IncreaseRepeatButton>
                    <RepeatButton x:Name="HorizontalLargeIncrease"
                                  Command="ScrollBar.PageRightCommand"
                                  IsTabStop="False"
                                  Interval="50"
                                  Style="{StaticResource ScrollBarTrackButtonStyle}" />
                </Track.IncreaseRepeatButton>
            </Track>
            <!--右按钮-->
            <Border Grid.Column="2"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Center">
                <RepeatButton local:Attach.Iconz="&#xe250;;"
                              Style="{StaticResource ScrollBarButtonStyle}"
                              IsTabStop="False" Interval="50"
                              Margin="0,1,0,0" Command="ScrollBar.LineRightCommand"/>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="BgInner" Property="Opacity" Value="0.5"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--垂直滚动条模板-->
    <ControlTemplate x:Key="VerticalScrollBarTemplate" TargetType="{x:Type ScrollBar}">
        <Grid x:Name="VerticalRoot" Height="{TemplateBinding Height}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <!--外部背景,好像不用更好看-->
            <!--<Border x:Name="Bg" Grid.Row="0" Grid.RowSpan="3" CornerRadius="0" Opacity="0" Background="#858585"/>-->
            <!--内部背景-->
            <Border x:Name="BgInner" Grid.Row="1" Margin="0"
                    CornerRadius="6" SnapsToDevicePixels ="True"
                    Opacity="0.3"
                    Background="{StaticResource ScrollBarBackground_Colors}"/>
            <!--上按钮-->
            <Border Grid.Row="0"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Center"
                    x:Name="VerticalSmallDecrease">
                <RepeatButton local:Attach.Iconz="&#xe253;"
                              Style="{StaticResource ScrollBarButtonStyle}"
                              IsTabStop="False" Interval="50"
                              Margin="0" Command="ScrollBar.LineUpCommand"/>
            </Border>
            <!--中间滑动区域-->
            <Track x:Name="PART_Track" IsDirectionReversed="true" Grid.Row="1">
                <!--上滑块-->
                <Track.DecreaseRepeatButton>
                    <RepeatButton x:Name="HorizontalLargeDecrease"
                                  Command="ScrollBar.PageUpCommand" 
                                  IsTabStop="False" Interval="50"
                                  Style="{StaticResource ScrollBarTrackButtonStyle}" />
                </Track.DecreaseRepeatButton>
                <!--中间滑块-->
                <Track.Thumb>
                    <Thumb Template="{StaticResource ThumbTemplate}" MinHeight="10"/>
                </Track.Thumb>
                <!--下滑块-->
                <Track.IncreaseRepeatButton>
                    <RepeatButton x:Name="HorizontalLargeIncrease"
                                  Command="ScrollBar.PageDownCommand"
                                  IsTabStop="False" Interval="50"
                                  Style="{StaticResource ScrollBarTrackButtonStyle}" />
                </Track.IncreaseRepeatButton>
            </Track>
            <!--下按钮-->
            <Border Grid.Row="2" VerticalAlignment="Center"
                    HorizontalAlignment="Center"
                    x:Name="VerticalSmallIncrease">
                <RepeatButton local:Attach.Iconz="&#xe252;"
                              Style="{StaticResource ScrollBarButtonStyle}"
                              IsTabStop="False" Interval="50"
                              Margin="0"
                              Command="ScrollBar.LineDownCommand"/>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="BgInner" Property="Opacity" Value="0.5"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--ScrollBar样式-->
    <Style x:Key="ScrollBarDefaultStyle" TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Template" Value="{StaticResource HorizontalScrollBarTemplate}" />
                <Setter Property="Height" Value="{StaticResource ScrollBarSize}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Template" Value="{StaticResource VerticalScrollBarTemplate}" />
                <Setter Property="Width" Value="{StaticResource ScrollBarSize}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--ScrollViewer样式-->
    <Style x:Key="ScrollViewerDefaultStyle" TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="leftColumn" Width="*"/>
                            <ColumnDefinition x:Name="rightColumn" Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                                CanContentScroll="{TemplateBinding CanContentScroll}"
                                                CanHorizontallyScroll="False"
                                                CanVerticallyScroll="False"
                                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                                Content="{TemplateBinding Content}"
                                                Margin="{TemplateBinding Padding}"
                                                Grid.Row="0"
                                                Grid.Column="0" />
                        <!--垂直滚动条 -->
                        <ScrollBar x:Name="PART_VerticalScrollBar"
                                   AutomationProperties.AutomationId="VerticalScrollBar"
                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                   Cursor="Arrow"
                                   Grid.Column="1"
                                   Maximum="{TemplateBinding ScrollableHeight}"
                                   Minimum="0"
                                   Grid.Row="0"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                   Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                        <!--水平底部滚动条-->
                        <ScrollBar x:Name="PART_HorizontalScrollBar"
                                   Grid.Column="0"
                                   Grid.Row="1"
                                   AutomationProperties.AutomationId="HorizontalScrollBar"
                                   Cursor="Arrow"
                                   Maximum="{TemplateBinding ScrollableWidth}"
                                   Minimum="0"
                                   Orientation="Horizontal"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                   Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                   ViewportSize="{TemplateBinding ViewportWidth}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarDefaultStyle}"/>
    <Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource ScrollViewerDefaultStyle}"/>



    <!--*************** TabControl      ****************************************-->
    <Style x:Key="TabItemIconzStyle" TargetType="{x:Type TabItem}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="{StaticResource ButtonBackground_Colors}"/>
        <Setter Property="Foreground" Value="{StaticResource TextForeground_Colors}" />
        <Setter Property="local:Attach.Iconz" Value="&#xe124;"/>
        <Setter Property="local:Attach.IconzSize" Value="13"/>
        <Setter Property="local:Attach.CornerRadius" Value="8,8,0,0"/>
        <Setter Property="local:Attach.IconzMargin" Value="0,0,2,0"/>
        <Setter Property="local:Attach.FocusBackground" Value="{StaticResource ButtonPressedBackground_Colors}"/>
        <Setter Property="local:Attach.FocusForeground" Value="{StaticResource ButtonMouseOverForeground_Colors}"/>
        <Setter Property="local:Attach.MouseOverBackground" Value="{StaticResource ButtonMouseOverBackground_Colors}"/>
        <Setter Property="local:Attach.MouseOverForeground" Value="{StaticResource ButtonPressedForeground_Colors}"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="MinWidth" Value="20"/>
        <Setter Property="Margin" Value="1 0 0 0"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border x:Name="border" Margin="{TemplateBinding Margin}"
                            SnapsToDevicePixels="True"
                            ToolTip="{TemplateBinding ToolTip}"
                            CornerRadius="{TemplateBinding local:Attach.CornerRadius}"
                            Background="{TemplateBinding Background}">
                        <StackPanel VerticalAlignment="Center"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    Margin="{TemplateBinding Padding}"
                                    Orientation="Horizontal">
                            <TextBlock Foreground="{TemplateBinding Foreground}"
                                       Style="{StaticResource IconzStyle}"
                                       Text="{TemplateBinding local:Attach.Iconz}"
                                       Margin="{TemplateBinding local:Attach.IconzMargin}"
                                       FontSize="{TemplateBinding local:Attach.IconzSize}" />
                            <TextBlock x:Name="txtheader" VerticalAlignment="Center"
                                       Text="{TemplateBinding Header}"
                                       Foreground="{TemplateBinding Foreground}"/>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter  Property="Background"
                                     Value="{Binding Path=(local:Attach.MouseOverBackground),RelativeSource={RelativeSource Self}}"/>
                            <Setter  Property="Foreground"
                                     Value="{Binding Path=(local:Attach.MouseOverForeground),RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter  Property="Background"
                                     Value="{Binding Path=(local:Attach.FocusBackground),RelativeSource={RelativeSource Self}}"/>
                            <Setter  Property="Foreground"
                                     Value="{Binding Path=(local:Attach.FocusForeground),RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LeftTabControlStyle" TargetType="{x:Type TabControl}">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource ControlBorderBrush_Colors}" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource TabItemIconzStyle}"/>
        <Setter Property="TabStripPlacement" Value="Left"/>
        <Setter Property="local:Attach.FocusBackground" Value="{StaticResource ButtonPressedBackground_Colors}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid x:Name="PART_Root" Margin="{TemplateBinding Padding}" >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border BorderBrush="{TemplateBinding local:Attach.FocusBackground}" BorderThickness="0,0,2,0" >
                            <StackPanel x:Name="HeaderPanel" Margin="0,5,0,5" Orientation="Vertical" IsItemsHost="True" />
                        </Border>
                        <Border x:Name="ContentPanel" Grid.Column="1"
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                KeyboardNavigation.TabIndex="2" 
                                KeyboardNavigation.TabNavigation="Local" Width="Auto">
                            <ContentPresenter ContentSource="SelectedContent"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              Width="Auto" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TopTabControlStyle" TargetType="{x:Type TabControl}">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource TabItemIconzStyle}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ControlBorderBrush_Colors}" />
        <Setter Property="TabStripPlacement" Value="Top"/>
        <Setter Property="local:Attach.FocusBackground" Value="{StaticResource ButtonPressedBackground_Colors}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid x:Name="PART_Root" Margin="{TemplateBinding Padding}" >
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0"
                                BorderBrush="{TemplateBinding local:Attach.FocusBackground}"
                                BorderThickness="0,0,0,2" >
                            <StackPanel x:Name="HeaderPanel" Margin="5,0,5,0"
                                        Orientation="Horizontal" IsItemsHost="True" />
                        </Border>
                        <Border x:Name="ContentPanel" Grid.Row="1"
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                KeyboardNavigation.TabIndex="2" 
                                KeyboardNavigation.TabNavigation="Local" Width="Auto">
                            <ContentPresenter ContentSource="SelectedContent"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              Width="Auto"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<Style TargetType="{x:Type TabControl}" BasedOn="{StaticResource TopTabControlStyle}"/>-->



    <!--*************** TextBox         ****************************************-->
    <!--TextBox默认样式-->
    <Style x:Key="TextBoxDefaultStyle" TargetType="{x:Type TextBox}">
        <Setter Property="SelectionBrush" Value="{StaticResource TextSelectionBrush_Colors}" />

        <Setter Property="ContextMenu" Value="{StaticResource TextBoxContextMenu}" />

        <Setter Property="FontFamily" Value="{StaticResource FontFamily_Key}" />
        <Setter Property="FontSize" Value="{StaticResource FontSize_Key}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="MinHeight" Value="26" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Background" Value="{StaticResource TextBackground_Colors}" />
        <Setter Property="Foreground" Value="{StaticResource TextForeground_Colors}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderBrush" Value="{StaticResource ControlBorderBrush_Colors}" />
        <Setter Property="local:Attach.FocusBorderBrush" Value="{StaticResource FocusBorderBrush_Colors}" />
        <Setter Property="local:Attach.MouseOverBorderBrush" Value="{StaticResource MouseOverBorderBrush_Colors}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <!-- 将SnapsToDevicePixels设置为True是为了可看出border和validation的错误 -->
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <!--插入的符号-->
        <Setter Property="CaretBrush" Value="{StaticResource TextForeground_Colors}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid x:Name="PART_Root">
                        <Border x:Name="Bg"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                CornerRadius="{TemplateBinding local:Attach.CornerRadius}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" />
                        <Grid x:Name="PART_InnerGrid">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition  Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition  Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <!--Label区域-->
                            <ContentControl x:Name="Label" Margin="1"
                                            Template="{TemplateBinding local:Attach.LabelTemplate}"
                                            Content="{TemplateBinding local:Attach.Label}"/>
                            <!--内容区域-->
                            <ScrollViewer x:Name="PART_ContentHost"
                                          BorderThickness="0" Grid.Column="1"
                                          IsTabStop="False" Margin="2"
                                          VerticalAlignment="Stretch"
                                          Background="{x:Null}" />
                            <!--水印-->
                            <TextBlock x:Name="WatermarkMessage"
                                       Padding="{TemplateBinding Padding}"
                                       Visibility="Collapsed"
                                       Text="{TemplateBinding local:Attach.Watermark}"
                                       Grid.Column="1"
                                       Foreground="{TemplateBinding Foreground}"
                                       IsHitTestVisible="False"
                                       Opacity="{StaticResource WatermarkOpacity_Key}"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                       Margin="5,2,5,2" />
                            <!--附加内容区域-->
                            <Border x:Name="PART_AttachContent" Grid.Column="2" Margin="1"
                                    VerticalAlignment="Center" HorizontalAlignment="Center">
                                <ContentControl VerticalAlignment="Top"
                                                VerticalContentAlignment="Top"
                                                Template="{TemplateBinding local:Attach.AttachContent}" />
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--显示水印-->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                            <Setter TargetName="WatermarkMessage" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush"
                                    Value="{Binding Path=(local:Attach.MouseOverBorderBrush),RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter  Property="BorderBrush" Value="{Binding Path=(local:Attach.FocusBorderBrush),RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                        <!--不可用时-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_Root" Property="Opacity"
                                    Value="{StaticResource DisableOpacity_Key}" />
                        </Trigger>
                        <!--只读时，禁用PART_AttachContent-->
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter TargetName="PART_AttachContent" Property="IsEnabled" Value="False" />
                            <Setter TargetName="Bg" Property="Opacity"
                                    Value="{StaticResource ReadonlyOpacity_Key}" />
                            <Setter TargetName="PART_ContentHost" Property="Opacity"
                                    Value="{StaticResource ReadonlyOpacity_Key}" />
                            <Setter TargetName="Label" Property="Opacity"
                                    Value="{StaticResource ReadonlyOpacity_Key}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--TextBox包含附加属性Label的样式-->
    <Style x:Key="TextBoxLabelStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBoxDefaultStyle}">
        <Setter Property="local:Attach.LabelTemplate" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Border Background="{StaticResource TextLabelBackground_Colors}">
                        <TextBlock VerticalAlignment="Center"
                                   HorizontalAlignment="Right"
                                   Margin="3"
                                   Text="{TemplateBinding Content}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--TextBoxLabelOpenFileStyle-->
    <Style x:Key="TextBoxLabelOpenFileStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBoxLabelStyle}">
        <Setter Property="local:Attach.Label" Value="文件路径："/>
        <Setter Property="local:Attach.Watermark" Value="请选择文件路径"/>
        <Setter Property="local:Attach.AttachContent">
            <Setter.Value>
                <ControlTemplate>
                    <local:Buttonz Iconz="&#xe014;"
                                   Style="{StaticResource ButtonzTransparencyStyle}"
                                   IsTabStop="False" IconzMargin="0"
                                   local:Attach.IsOpenFileButtonBehaviorEnabled="True"
                                   Command="local:Attach.MyOpenFileCommand" 
                                   CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type TextBox}}}"
                                   Margin="0,1,0,2"
                                   IconzSize="18"
                                   Foreground="{StaticResource TextForeground_Colors}"
                                   Cursor="Arrow"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--TextBoxLabelOpenFolderStyle-->
    <Style x:Key="TextBoxLabelOpenFolderStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBoxLabelStyle}">
        <Setter Property="local:Attach.Label" Value="设置路径："/>
        <Setter Property="local:Attach.Watermark" Value="请选择文件夹路径"/>
        <Setter Property="local:Attach.AttachContent">
            <Setter.Value>
                <ControlTemplate>
                    <local:Buttonz Iconz="&#xe118;"
                                  Style="{StaticResource ButtonzTransparencyStyle}"
                                  IsTabStop="False" IconzMargin="0"
                                  VerticalAlignment="Center"
                                  local:Attach.IsOpenFolderButtonBehaviorEnabled="True"
                                  Command="local:Attach.MyOpenFolderCommand" 
                                  CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type TextBox}}}"
                                  Margin="0,1,0,2"
                                  IconzSize="18"
                                  Foreground="{StaticResource TextForeground_Colors}"
                                  Cursor="Arrow"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--TextBoxLabelSaveFileStyle-->
    <Style x:Key="TextBoxLabelSaveFileStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBoxLabelStyle}">
        <Setter Property="local:Attach.Label" Value="保存路径："/>
        <Setter Property="local:Attach.Watermark" Value="请选择保存文件的路径"/>
        <Setter Property="local:Attach.AttachContent">
            <Setter.Value>
                <ControlTemplate>
                    <local:Buttonz
                        Iconz="&#xe117;"
                        Style="{StaticResource ButtonzTransparencyStyle}"
                        IsTabStop="False" IconzMargin="0"
                        local:Attach.IsSaveFileButtonBehaviorEnabled="True"
                        Command="local:Attach.MySaveFileCommand" 
                        CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type TextBox}}}"
                        Margin="0,1,0,2"
                        IconzSize="18"
                        Foreground="{StaticResource TextForeground_Colors}"
                        Cursor="Arrow"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--TextBoxReadonlyLabelStyle：只读可复制的文本样式-->
    <Style x:Key="TextBoxReadonlyLabelStyle" TargetType="{x:Type TextBox}">
        <Setter Property="FontSize" Value="{StaticResource FontSize_Key}"/>
        <Setter Property="FontFamily" Value="{StaticResource FontFamily_Key}"/>
        <Setter Property="Foreground" Value="{StaticResource TextForeground_Colors}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="ContextMenu" Value="{StaticResource TextBoxContextMenu}"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="CaretBrush" Value="{StaticResource TextForeground_Colors}"/>
        <Setter Property="SelectionBrush" Value="{StaticResource TextSelectionBrush_Colors}"/>
        <Setter Property="Width" Value="Auto"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{StaticResource DisableOpacity_Key}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--*********** 所有TextBox输入验证都可以使用的自定义样式 ***********-->
    <Style x:Key="TextBoxValidationStyle" TargetType="{x:Type TextBox}">
        <!--<Setter Property="Width" Value="60" />
                <Setter Property="Margin" Value="10" />-->
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="Validation.ErrorTemplate">
                    <Setter.Value>
                        <ControlTemplate>
                            <DockPanel LastChildFill="True">
                                <TextBlock DockPanel.Dock="Right" Foreground="Red" FontSize="12pt"
                                             Text="{Binding ElementName=MyAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">
                                </TextBlock>
                                <Image DockPanel.Dock="Right" Width="20" Source="/Resources/Images/sad.png" />
                                <Border BorderBrush="Red" BorderThickness="1">
                                    <AdornedElementPlaceholder Name="MyAdorner" />
                                </Border>
                            </DockPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--<Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBoxDefaultStyle}"/>-->



    <!--*************** TreeView        ****************************************-->
    <!--TreeViewItem默认样式-->
    <Style  x:Key="TreeViewItemDefaultStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="MinHeight" Value="25" />
        <Setter Property="Foreground" Value="{StaticResource TextForeground_Colors}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="local:Attach.IconzSize" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <StackPanel>
                        <Border x:Name="Bd" Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                MinHeight="{TemplateBinding MinHeight}"
                                UseLayoutRounding="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <!--多层级间隔，暂缓-->
                            <!--<Grid Margin="{Binding Converter={StaticResource LengthConverter}, RelativeSource={x:Static RelativeSource.TemplatedParent}}"-->
                            <Grid Margin="{TemplateBinding Margin}"
                                  VerticalAlignment="Stretch">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MinWidth="18" Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <!--展开收缩按钮-->
                                <ToggleButton x:Name="ExpanderBtn" 
                                              IsChecked="{Binding Path=IsExpanded, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=TwoWay}"
                                              ClickMode="Press" >
                                    <ToggleButton.Template>
                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                            <Border>
                                                <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                            </Border>
                                        </ControlTemplate>
                                    </ToggleButton.Template>
                                    <ToggleButton.Content>
                                        <TextBlock x:Name="ExpanderIcon"
                                                   Foreground="{TemplateBinding Foreground}"
                                                   Text="&#xe01e;"
                                                   Style="{StaticResource IconzStyle}"
                                                   FontSize="{TemplateBinding local:Attach.IconzSize}" />
                                    </ToggleButton.Content>
                                </ToggleButton>
                                <!--内容-->
                                <ContentPresenter x:Name="PART_Header"
                                                  Grid.Column="1" ContentSource="Header"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </Grid>
                        </Border>
                        <ItemsPresenter Margin="18,0,0,0" x:Name="ItemsHost"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ExpanderIcon" Property="Text" Value="&#xe01f;" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="False">
                            <Setter TargetName="ExpanderIcon" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background"
                                    Value="{StaticResource Tree_ItemMouseOverBackground_Colors}" />
                            <Setter Property="Foreground"
                                    Value="{StaticResource Tree_ItemMouseOverForeground_Colors}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background"
                                    Value="{StaticResource Tree_ItemSelectedBackground_Colors}" />
                            <Setter Property="Foreground"
                                    Value="{StaticResource Tree_ItemsSelectedForeground_Colors}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="Selector.IsSelectionActive" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"
                                    Value="{StaticResource Tree_ItemsSelectedBackground_Colors}" />
                            <Setter Property="Foreground"
                                    Value="{StaticResource Tree_ItemsSelectedForeground_Colors}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--TreeView默认样式-->
    <Style x:Key="TreeViewDefaultStyle" TargetType="{x:Type TreeView}">
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True"/>
        <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling" />
        <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="False" />
        <Setter Property="Background" Value="{StaticResource Tree_ItemsContentBackground_Colors}"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource TreeViewItemDefaultStyle}"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel IsItemsHost="True" Margin="0"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--<Style TargetType="{x:Type TreeView}" BasedOn="{StaticResource TreeViewDefaultStyle}"/>-->



    <!--*************** Windowz         ****************************************-->
    <!--Windowz基本样式，演示如何自定义头部-->
    <Style x:Key="WindowzBaseStyle" TargetType="{x:Type local:Windowz}">
        <Setter Property="Background" Value="{StaticResource WindowBackground_Colors}"/>
        <Setter Property="Foreground" Value="{StaticResource WindowForeground_Colors}"/>
        <Setter Property="FontSize" Value="{StaticResource FontSize_Key}"/>
        <Setter Property="FontFamily" Value="{StaticResource FontFamily_Key}"/>
        <Setter Property="Width" Value="480"/>
        <Setter Property="Height" Value="320"/>
        <Setter Property="BorderBrush" Value="{StaticResource WindowBorderBrush_Colors}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="IconzSize" Value="20"/>
        <Setter Property="CaptionHeight" Value="26"/>
        <Setter Property="ResizeMode" Value="CanResizeWithGrip"/>
        <!--标题栏背景色-->
        <Setter Property="CaptionBarBackground" Value="{StaticResource CaptionBarBackground_Colors}" />
        <Setter Property="CaptionBarForeground" Value="{StaticResource CaptionBarForeground_Colors}" />
        <Setter Property="Iconz" Value="&#xe237;"/>
        <Setter Property="MaxboxEnable" Value="True"/>
        <Setter Property="MinboxEnable" Value="True"/>
        <!--建议内边框=3：ResizeBorderThickness = new Thickness(3);-->
        <Setter Property="Padding" Value="3"/>
        <Setter Property="local:Attach.CornerRadius" Value="0"/>
        <!--窗体基本设置-->
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome ResizeBorderThickness="8"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:Windowz}">
                    <Grid Margin="6">
                        <!--背景，边框-->
                        <Border x:Name="part_Bg"
                                CornerRadius="{TemplateBinding local:Attach.CornerRadius}" 
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Effect="{StaticResource WindowDropShadow_Colors}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"  />
                        <Border x:Name="part_BgInner"
                                CornerRadius="{TemplateBinding local:Attach.CornerRadius}" 
                                Background="{StaticResource WindowInnerBackground_Colors}" 
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"  />
                        <!--内容区域-->
                        <AdornerDecorator>
                            <ContentPresenter Margin="1" Content="{TemplateBinding Content}" />
                        </AdornerDecorator>
                        <!--窗体功能按钮：最小、最大、关闭-->
                        <Border VerticalAlignment="Top"
                                Height="{TemplateBinding CaptionHeight}"
                                Width="Auto" Margin="1" HorizontalAlignment="Right">
                            <StackPanel Orientation="Horizontal"
                                        VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                        Height="30">
                                <local:Buttonz x:Name="part_btnMin"
                                               Width="26"
                                               VerticalAlignment="Center"
                                               Margin="1,2,1,2" 
                                               Visibility="{Binding Path=MinboxEnable,RelativeSource={RelativeSource TemplatedParent},Converter={x:Static local:MyConverter.BooleanToVisibility}}"
                                               Style="{StaticResource ButtonzTransparencyStyle}"
                                               Iconz="&#xe01f;"
                                               IconzSize="16"
                                               WindowChrome.IsHitTestVisibleInChrome="True"
                                               Foreground="{TemplateBinding CaptionBarForeground}"
                                               Command="{Binding Path=MyMinimizeWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"/>

                                <local:Buttonz x:Name="part_btnMax"
                                               Width="26"
                                               VerticalAlignment="Center"
                                               Margin="1,2,1,2" 
                                               Visibility="{Binding Path=MaxboxEnable,RelativeSource={RelativeSource TemplatedParent},Converter={x:Static local:MyConverter.BooleanToVisibility}}"
                                               Style="{StaticResource ButtonzTransparencyStyle}"
                                               Iconz="&#xe043;"
                                               IconzSize="16"
                                               WindowChrome.IsHitTestVisibleInChrome="True"
                                               Foreground="{TemplateBinding CaptionBarForeground}"
                                               Command="{Binding Path=MyMaximizeWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"/>

                                <local:Buttonz x:Name="part_btnClose"
                                               Width="38"
                                               VerticalAlignment="Center"
                                               Margin="1,2,3,2"
                                               CornerRadius="0"
                                               MouseOverBackground="Red"
                                               MouseOverForeground="White"
                                               PressedBackground="#AA0D0D"
                                               PressedForeground="White"
                                               AllowsAnimation="True"
                                               Style="{StaticResource ButtonzTransparencyStyle}"
                                               Iconz="&#xe014;"
                                               IconzSize="16"
                                               WindowChrome.IsHitTestVisibleInChrome="True"
                                               IconzMargin="0"
                                               Foreground="{TemplateBinding CaptionBarForeground}"
                                               Command="{Binding Path=MyCloseWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"/>
                            </StackPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter Property="Iconz" TargetName="part_btnMax" Value="&#xe043;"/>
                        </Trigger>
                        <Trigger Property="WindowState" Value="Normal">
                            <Setter Property="Iconz" TargetName="part_btnMax" Value="&#xe157;"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--默认Windowz的样式(样式是在Windowz.cs文件中指定的)-->
    <Style x:Key="WindowzDefaultStyle" TargetType="{x:Type local:Windowz}">
        <Setter Property="Background" Value="{StaticResource WindowBackground_Colors}"/>
        <Setter Property="Foreground" Value="{StaticResource WindowForeground_Colors}"/>
        <Setter Property="FontSize" Value="{StaticResource FontSize_Key}"/>
        <Setter Property="FontFamily" Value="{StaticResource FontFamily_Key}"/>
        <Setter Property="Width" Value="480"/>
        <Setter Property="Height" Value="320"/>
        <Setter Property="BorderBrush" Value="{StaticResource WindowBorderBrush_Colors}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="IconzSize" Value="20"/>
        <Setter Property="CaptionHeight" Value="26"/>
        <Setter Property="ResizeMode" Value="CanResizeWithGrip"/>
        <!--标题栏背景色-->
        <Setter Property="CaptionBarBackground" Value="{StaticResource CaptionBarBackground_Colors}" />
        <Setter Property="CaptionBarForeground" Value="{StaticResource CaptionBarForeground_Colors}" />
        <Setter Property="Iconz" Value="&#xe02b;"/>
        <Setter Property="MaxboxEnable" Value="True"/>
        <Setter Property="MinboxEnable" Value="True"/>
        <!--建议内边框=3：ResizeBorderThickness = new Thickness(3);-->
        <Setter Property="Padding" Value="3"/>
        <Setter Property="local:Attach.CornerRadius" Value="0"/>
        <!--窗体基本设置 shell:WindowChrome-->
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome ResizeBorderThickness="8"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:Windowz}">
                    <Grid Margin="6">
                        <!--背景-->
                        <Border x:Name="part_Bg" CornerRadius="{TemplateBinding local:Attach.CornerRadius}" 
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Effect="{StaticResource WindowDropShadow_Colors}"
                            BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"  />
                        <Border  x:Name="part_BgInner"
                                 CornerRadius="{TemplateBinding local:Attach.CornerRadius}"
                                 Background="{StaticResource WindowInnerBackground_Colors}"
                                 BorderThickness="{TemplateBinding BorderThickness}"
                                 SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Grid Margin="1">
                            <Grid.RowDefinitions>
                                <RowDefinition MinHeight="18" Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <!--Caption标题部分-->
                            <Border Margin="0" Grid.Row="0"
                                    Background="{TemplateBinding CaptionBarBackground}">
                                <Grid Margin="2,1,2,0">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <!--Header部分-->
                                    <StackPanel x:Name="PART_Header"
                                                Height="{TemplateBinding CaptionHeight}" Margin="5,1,5,1" Orientation="Horizontal" VerticalAlignment="Center">
                                        <TextBlock Foreground="{TemplateBinding CaptionBarForeground}"
                                                   Style="{StaticResource IconzStyle}"
                                                   FontSize="{TemplateBinding IconzSize}" 
                                                   Text="{TemplateBinding Iconz}"/>
                                        <TextBlock VerticalAlignment="Center" Margin="5"
                                                   FontSize="{StaticResource HeaderFontSize_Key}"
                                                   Foreground="{TemplateBinding CaptionBarForeground}"
                                                   Text="{TemplateBinding Title}"/>
                                    </StackPanel>
                                    <!--窗体功能按钮：最小、最大、关闭-->
                                    <StackPanel Grid.Column="1" Orientation="Horizontal"
                                                VerticalAlignment="Top"
                                                Margin="1"
                                                HorizontalAlignment="Right"
                                                Height="{TemplateBinding CaptionHeight}">
                                        <local:Buttonz x:Name="part_btnMin"
                                                       Width="26"
                                                       VerticalAlignment="Center"
                                                       Margin="1" 
                                                       Visibility="{Binding Path=MinboxEnable,RelativeSource={RelativeSource TemplatedParent},Converter={x:Static local:MyConverter.BooleanToVisibility}}"
                                                       Style="{StaticResource ButtonzTransparencyStyle}"
                                                       Iconz="&#xe01f;"
                                                       IconzSize="14"
                                                       WindowChrome.IsHitTestVisibleInChrome="True"
                                                       Foreground="{TemplateBinding CaptionBarForeground}"
                                               Command="{Binding Path=MyMinimizeWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"/>

                                        <local:Buttonz x:Name="part_btnMax"
                                                       Width="26"
                                                       VerticalAlignment="Center" 
                                                       Margin="1" 
                                                Visibility="{Binding Path=MaxboxEnable,RelativeSource={RelativeSource TemplatedParent},Converter={x:Static local:MyConverter.BooleanToVisibility}}"
                                                Style="{StaticResource ButtonzTransparencyStyle}"
                                                       Iconz="&#xe043;" IconzSize="14"
                                                WindowChrome.IsHitTestVisibleInChrome="True"
                                                       Foreground="{TemplateBinding CaptionBarForeground}"
                                               Command="{Binding Path=MyMaximizeWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"/>

                                        <local:Buttonz x:Name="part_btnClose"
                                                       Width="35" VerticalAlignment="Center" Margin="1" 
                                                       CornerRadius="0" Padding="1 2 1 2"
                                                       MouseOverBackground="Red"
                                                       MouseOverForeground="White"
                                                       PressedBackground="#AA0D0D"
                                                       PressedForeground="White"
                                                       AllowsAnimation="True"
                                                       Style="{StaticResource ButtonzTransparencyStyle}"
                                                       Iconz="&#xe014;"
                                                       IconzSize="14"
                                                       WindowChrome.IsHitTestVisibleInChrome="True"
                                                       IconzMargin="0"
                                                       Foreground="{TemplateBinding CaptionBarForeground}"
                                                       Command="{Binding Path=MyCloseWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"/>
                                    </StackPanel>
                                </Grid>
                            </Border>
                            <!--窗体内容区域-->
                            <AdornerDecorator Grid.Row="1" Margin="3,0,3,3">
                                <ContentPresenter Content="{TemplateBinding Content}" />
                            </AdornerDecorator>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter Property="Iconz" TargetName="part_btnMax" Value="&#xe043;"/>
                        </Trigger>
                        <Trigger Property="WindowState" Value="Normal">
                            <Setter Property="Iconz" TargetName="part_btnMax" Value="&#xe157;"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <ResourceDictionary.MergedDictionaries>

        <!--定义在Style下的控件样式均未引用IconzStyle，另外，合并这些资源字典时必须加【/Wpfz;component】前缀-->
        <ResourceDictionary Source="/Wpfz;component/Styles/PlayingCard.xaml"/>
        <ResourceDictionary Source="/Wpfz;component/Styles/V3dView.xaml"/>
        
    </ResourceDictionary.MergedDictionaries>

</ResourceDictionary>
